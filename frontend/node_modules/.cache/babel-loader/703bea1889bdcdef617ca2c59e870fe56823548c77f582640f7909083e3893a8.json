{"ast":null,"code":"var _jsxFileName = \"/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImagesAnnotationPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import ImagesAnnotation from './annotation/ImagesAnnotation';\n\n// function ImagesAnnotationPage() {\n//   const { id } = useParams();\n//   const [image, setImage] = useState(null);\n\n//   useEffect(() => {\n//     fetch(`http://localhost:5000/images/edit/${id}`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setImage(data.data);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error fetching image:\", error);\n//       });\n//   }, [id]);\n\n//   return (\n//     <div>\n\n//       {image && (\n//         <img\n//           alt=\"Clicked_Image\"\n//           width={600}\n//           height={600}\n//           src={image.image}\n//         />\n//       )}\n//       <ImagesAnnotation/>\n//     </div>\n//   );\n// }\n\n// export default ImagesAnnotationPage;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// function ImagesAnnotationPage() {\n//   const { id } = useParams();\n//   const [image, setImage] = useState(null);\n//   const canvasRef = useRef(null);\n//   const [keypoints, setKeypoints] = useState([]);\n//   const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n//   const [lineDistance, setLineDistance] = useState(0);\n\n//   const drawImage = () => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     const img = new Image();\n//     img.onload = () => {\n//       context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//     };\n//     img.src = image.image;\n//   };\n\n//   const drawKeypoints = () => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'red';\n//     keypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   };\n\n//   const drawSelectedKeypoints = () => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'green';\n//     selectedKeypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   };\n\n//   const drawLine = () => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.strokeStyle = 'blue';\n//     if (selectedKeypoints.length === 2) {\n//       const [kp1, kp2] = selectedKeypoints;\n//       context.beginPath();\n//       context.moveTo(kp1.x, kp1.y);\n//       context.lineTo(kp2.x, kp2.y);\n//       context.stroke();\n//     }\n//   };\n\n//   const handleCanvasClick = (event) => {\n//     const canvas = canvasRef.current;\n//     const rect = canvas.getBoundingClientRect();\n//     const x = event.clientX - rect.left;\n//     const y = event.clientY - rect.top;\n//     const newKeypoint = { x, y };\n//     setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n//   };\n\n//   const handleKeypointClick = (keypoint) => {\n//     setSelectedKeypoints((prevSelectedKeypoints) => {\n//       if (prevSelectedKeypoints.includes(keypoint)) {\n//         return prevSelectedKeypoints.filter((kp) => kp !== keypoint);\n//       } else {\n//         return [...prevSelectedKeypoints, keypoint];\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     fetch(`http://localhost:5000/images/edit/${id}`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setImage(data.data);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error fetching image:\", error);\n//       });\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (image) {\n//       const canvas = canvasRef.current;\n//       const context = canvas.getContext('2d');\n//       context.clearRect(0, 0, canvas.width, canvas.height);\n//       drawImage();\n//       drawKeypoints();\n//       drawSelectedKeypoints();\n//       drawLine();\n\n//       if (selectedKeypoints.length === 2) {\n//         const [kp1, kp2] = selectedKeypoints;\n//         const distance = Math.sqrt(\n//           Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n//         );\n//         setLineDistance(distance);\n//       } else {\n//         setLineDistance(0);\n//       }\n//     }\n//   }, [image, keypoints, selectedKeypoints]);\n\n//   return (\n//     <div>\n//       {/* {image && (\n//         <img\n//           alt=\"Clicked_Image\"\n//           width={600}\n//           height={600}\n//           src={image.image}\n//         />\n//       )} */}\n//       <canvas\n//         ref={canvasRef}\n//         width={400}\n//         height={400}\n//         onClick={handleCanvasClick}\n//       />\n//       <div>\n//         <h4>Keypoints:</h4>\n//         {keypoints.map((keypoint, index) => (\n//           <div\n//             key={index}\n//             onClick={() => handleKeypointClick(keypoint)}\n//             style={{\n//               color: selectedKeypoints.includes(keypoint) ? 'green' : 'black',\n//               cursor: 'pointer',\n//             }}\n//           >\n//             {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n//           </div>\n//         ))}\n//       </div>\n//       {selectedKeypoints.length === 2 && (\n//         <div>\n//           <h4>Distance:</h4>\n//           {`Distance between keypoints: ${lineDistance.toFixed(2)} pixels`}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ImagesAnnotationPage;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImagesAnnotationPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [image, setImage] = useState(null);\n  const canvasRef = useRef(null);\n  const [keypoints, setKeypoints] = useState([]);\n  const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n  const [lineDistance, setLineDistance] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [draggedKeypoint, setDraggedKeypoint] = useState(null);\n  const drawImage = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n      drawKeypoints();\n      drawSelectedKeypoints();\n      drawLine();\n    };\n    img.src = image.image;\n  };\n  const drawKeypoints = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.fillStyle = 'red';\n    keypoints.forEach(keypoint => {\n      context.beginPath();\n      context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n      context.fill();\n    });\n  };\n  const drawSelectedKeypoints = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.fillStyle = 'green';\n    selectedKeypoints.forEach(keypoint => {\n      context.beginPath();\n      context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n      context.fill();\n    });\n  };\n  const drawLine = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.strokeStyle = 'blue';\n    if (selectedKeypoints.length === 2) {\n      const [kp1, kp2] = selectedKeypoints;\n      context.beginPath();\n      context.moveTo(kp1.x, kp1.y);\n      context.lineTo(kp2.x, kp2.y);\n      context.stroke();\n    }\n  };\n  const handleCanvasClick = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const newKeypoint = {\n      x,\n      y\n    };\n    setKeypoints(prevKeypoints => [...prevKeypoints, newKeypoint]);\n  };\n  const handleKeypointClick = keypoint => {\n    if (selectedKeypoints.includes(keypoint)) {\n      setSelectedKeypoints(selectedKeypoints.filter(kp => kp !== keypoint));\n    } else {\n      setSelectedKeypoints([...selectedKeypoints, keypoint]);\n    }\n  };\n  const handleKeypointDragStart = keypoint => {\n    setIsDragging(true);\n    setDraggedKeypoint(keypoint);\n  };\n  const handleKeypointDrag = event => {\n    if (isDragging && draggedKeypoint) {\n      const canvas = canvasRef.current;\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const updatedKeypoints = keypoints.map(keypoint => keypoint === draggedKeypoint ? {\n        ...keypoint,\n        x,\n        y\n      } : keypoint);\n      setKeypoints(updatedKeypoints);\n    }\n  };\n  const handleKeypointDragEnd = () => {\n    setIsDragging(false);\n    setDraggedKeypoint(null);\n  };\n  useEffect(() => {\n    fetch(`http://localhost:5000/images/edit/${id}`).then(res => res.json()).then(data => {\n      setImage(data.data);\n    }).catch(error => {\n      console.log(\"Error fetching image:\", error);\n    });\n  }, [id]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    drawImage();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [image]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    drawKeypoints();\n    drawSelectedKeypoints();\n    drawLine();\n\n    // Calculate distance between selected keypoints\n    if (selectedKeypoints.length === 2) {\n      const [kp1, kp2] = selectedKeypoints;\n      const distance = Math.sqrt(Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2));\n      setLineDistance(distance);\n    } else {\n      setLineDistance(0);\n    }\n  }, [keypoints, selectedKeypoints]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [image && /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"Clicked_Image\",\n      width: 600,\n      height: 600,\n      src: image.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 600,\n      onClick: handleCanvasClick,\n      onMouseMove: handleKeypointDrag,\n      onMouseUp: handleKeypointDragEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Keypoints:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), keypoints.map((keypoint, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleKeypointClick(keypoint),\n        onMouseDown: () => handleKeypointDragStart(keypoint),\n        style: {\n          color: selectedKeypoints.includes(keypoint) ? 'green' : 'black',\n          cursor: 'move'\n        },\n        children: `Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), selectedKeypoints.length === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Distance:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), `Distance between keypoints: ${lineDistance.toFixed(2)} pixels`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 5\n  }, this);\n}\n_s(ImagesAnnotationPage, \"/7yE7Tb8o3uIWhUbHCXOm1+1Bek=\", false, function () {\n  return [useParams];\n});\n_c = ImagesAnnotationPage;\nexport default ImagesAnnotationPage;\nvar _c;\n$RefreshReg$(_c, \"ImagesAnnotationPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","jsxDEV","_jsxDEV","ImagesAnnotationPage","_s","id","image","setImage","canvasRef","keypoints","setKeypoints","selectedKeypoints","setSelectedKeypoints","lineDistance","setLineDistance","isDragging","setIsDragging","draggedKeypoint","setDraggedKeypoint","drawImage","canvas","current","context","getContext","img","Image","onload","width","height","drawKeypoints","drawSelectedKeypoints","drawLine","src","fillStyle","forEach","keypoint","beginPath","arc","x","y","Math","PI","fill","strokeStyle","length","kp1","kp2","moveTo","lineTo","stroke","handleCanvasClick","event","rect","getBoundingClientRect","clientX","left","clientY","top","newKeypoint","prevKeypoints","handleKeypointClick","includes","filter","kp","handleKeypointDragStart","handleKeypointDrag","updatedKeypoints","map","handleKeypointDragEnd","fetch","then","res","json","data","catch","error","console","log","clearRect","distance","sqrt","pow","children","alt","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","onMouseMove","onMouseUp","index","onMouseDown","style","color","cursor","toFixed","_c","$RefreshReg$"],"sources":["/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImagesAnnotationPage.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import ImagesAnnotation from './annotation/ImagesAnnotation';\n\n// function ImagesAnnotationPage() {\n//   const { id } = useParams();\n//   const [image, setImage] = useState(null);\n\n//   useEffect(() => {\n//     fetch(`http://localhost:5000/images/edit/${id}`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setImage(data.data);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error fetching image:\", error);\n//       });\n//   }, [id]);\n\n//   return (\n//     <div>\n      \n//       {image && (\n//         <img\n//           alt=\"Clicked_Image\"\n//           width={600}\n//           height={600}\n//           src={image.image}\n//         />\n//       )}\n//       <ImagesAnnotation/>\n//     </div>\n//   );\n// }\n\n// export default ImagesAnnotationPage;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// function ImagesAnnotationPage() {\n//   const { id } = useParams();\n//   const [image, setImage] = useState(null);\n//   const canvasRef = useRef(null);\n//   const [keypoints, setKeypoints] = useState([]);\n//   const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n//   const [lineDistance, setLineDistance] = useState(0);\n\n//   const drawImage = () => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     const img = new Image();\n//     img.onload = () => {\n//       context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//     };\n//     img.src = image.image;\n//   };\n\n//   const drawKeypoints = () => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'red';\n//     keypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   };\n\n//   const drawSelectedKeypoints = () => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'green';\n//     selectedKeypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   };\n\n//   const drawLine = () => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.strokeStyle = 'blue';\n//     if (selectedKeypoints.length === 2) {\n//       const [kp1, kp2] = selectedKeypoints;\n//       context.beginPath();\n//       context.moveTo(kp1.x, kp1.y);\n//       context.lineTo(kp2.x, kp2.y);\n//       context.stroke();\n//     }\n//   };\n\n//   const handleCanvasClick = (event) => {\n//     const canvas = canvasRef.current;\n//     const rect = canvas.getBoundingClientRect();\n//     const x = event.clientX - rect.left;\n//     const y = event.clientY - rect.top;\n//     const newKeypoint = { x, y };\n//     setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n//   };\n\n//   const handleKeypointClick = (keypoint) => {\n//     setSelectedKeypoints((prevSelectedKeypoints) => {\n//       if (prevSelectedKeypoints.includes(keypoint)) {\n//         return prevSelectedKeypoints.filter((kp) => kp !== keypoint);\n//       } else {\n//         return [...prevSelectedKeypoints, keypoint];\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     fetch(`http://localhost:5000/images/edit/${id}`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setImage(data.data);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error fetching image:\", error);\n//       });\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (image) {\n//       const canvas = canvasRef.current;\n//       const context = canvas.getContext('2d');\n//       context.clearRect(0, 0, canvas.width, canvas.height);\n//       drawImage();\n//       drawKeypoints();\n//       drawSelectedKeypoints();\n//       drawLine();\n\n//       if (selectedKeypoints.length === 2) {\n//         const [kp1, kp2] = selectedKeypoints;\n//         const distance = Math.sqrt(\n//           Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n//         );\n//         setLineDistance(distance);\n//       } else {\n//         setLineDistance(0);\n//       }\n//     }\n//   }, [image, keypoints, selectedKeypoints]);\n\n//   return (\n//     <div>\n//       {/* {image && (\n//         <img\n//           alt=\"Clicked_Image\"\n//           width={600}\n//           height={600}\n//           src={image.image}\n//         />\n//       )} */}\n//       <canvas\n//         ref={canvasRef}\n//         width={400}\n//         height={400}\n//         onClick={handleCanvasClick}\n//       />\n//       <div>\n//         <h4>Keypoints:</h4>\n//         {keypoints.map((keypoint, index) => (\n//           <div\n//             key={index}\n//             onClick={() => handleKeypointClick(keypoint)}\n//             style={{\n//               color: selectedKeypoints.includes(keypoint) ? 'green' : 'black',\n//               cursor: 'pointer',\n//             }}\n//           >\n//             {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n//           </div>\n//         ))}\n//       </div>\n//       {selectedKeypoints.length === 2 && (\n//         <div>\n//           <h4>Distance:</h4>\n//           {`Distance between keypoints: ${lineDistance.toFixed(2)} pixels`}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ImagesAnnotationPage;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction ImagesAnnotationPage() {\n  const { id } = useParams();\n  const [image, setImage] = useState(null);\n  const canvasRef = useRef(null);\n  const [keypoints, setKeypoints] = useState([]);\n  const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n  const [lineDistance, setLineDistance] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [draggedKeypoint, setDraggedKeypoint] = useState(null);\n\n  const drawImage = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n      drawKeypoints();\n      drawSelectedKeypoints();\n      drawLine();\n    };\n    img.src = image.image;\n  };\n\n  const drawKeypoints = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.fillStyle = 'red';\n    keypoints.forEach((keypoint) => {\n      context.beginPath();\n      context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n      context.fill();\n    });\n  };\n\n  const drawSelectedKeypoints = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.fillStyle = 'green';\n    selectedKeypoints.forEach((keypoint) => {\n      context.beginPath();\n      context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n      context.fill();\n    });\n  };\n\n  const drawLine = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.strokeStyle = 'blue';\n    if (selectedKeypoints.length === 2) {\n      const [kp1, kp2] = selectedKeypoints;\n      context.beginPath();\n      context.moveTo(kp1.x, kp1.y);\n      context.lineTo(kp2.x, kp2.y);\n      context.stroke();\n    }\n  };\n\n  const handleCanvasClick = (event) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const newKeypoint = { x, y };\n    setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n  };\n\n  const handleKeypointClick = (keypoint) => {\n    if (selectedKeypoints.includes(keypoint)) {\n      setSelectedKeypoints(selectedKeypoints.filter((kp) => kp !== keypoint));\n    } else {\n      setSelectedKeypoints([...selectedKeypoints, keypoint]);\n    }\n  };\n\n  const handleKeypointDragStart = (keypoint) => {\n    setIsDragging(true);\n    setDraggedKeypoint(keypoint);\n  };\n\n  const handleKeypointDrag = (event) => {\n    if (isDragging && draggedKeypoint) {\n      const canvas = canvasRef.current;\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const updatedKeypoints = keypoints.map((keypoint) =>\n        keypoint === draggedKeypoint ? { ...keypoint, x, y } : keypoint\n      );\n      setKeypoints(updatedKeypoints);\n    }\n  };\n\n  const handleKeypointDragEnd = () => {\n    setIsDragging(false);\n    setDraggedKeypoint(null);\n  };\n\n  useEffect(() => {\n    fetch(`http://localhost:5000/images/edit/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        setImage(data.data);\n      })\n      .catch((error) => {\n        console.log(\"Error fetching image:\", error);\n      });\n  }, [id]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    drawImage();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [image]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    drawKeypoints();\n    drawSelectedKeypoints();\n    drawLine();\n\n    // Calculate distance between selected keypoints\n    if (selectedKeypoints.length === 2) {\n      const [kp1, kp2] = selectedKeypoints;\n      const distance = Math.sqrt(\n        Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n      );\n      setLineDistance(distance);\n    } else {\n      setLineDistance(0);\n    }\n  }, [keypoints, selectedKeypoints]);\n\n  return (\n    <div>\n      {image && (\n        <img alt=\"Clicked_Image\" width={600} height={600} src={image.image} />\n      )}\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={600}\n        onClick={handleCanvasClick}\n        onMouseMove={handleKeypointDrag}\n        onMouseUp={handleKeypointDragEnd}\n      />\n      <div>\n        <h4>Keypoints:</h4>\n        {keypoints.map((keypoint, index) => (\n          <div\n            key={index}\n            onClick={() => handleKeypointClick(keypoint)}\n            onMouseDown={() => handleKeypointDragStart(keypoint)}\n            style={{\n              color: selectedKeypoints.includes(keypoint) ? 'green' : 'black',\n              cursor: 'move',\n            }}\n          >\n            {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n          </div>\n        ))}\n      </div>\n      {selectedKeypoints.length === 2 && (\n        <div>\n          <h4>Distance:</h4>\n          {`Distance between keypoints: ${lineDistance.toFixed(2)} pixels`}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImagesAnnotationPage;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMS,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACW,SAAS,EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}