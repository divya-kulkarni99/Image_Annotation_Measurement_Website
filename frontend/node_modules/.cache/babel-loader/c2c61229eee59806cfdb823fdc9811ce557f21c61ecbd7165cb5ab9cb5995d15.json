{"ast":null,"code":"var _jsxFileName = \"/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImagesAnnotationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useLayoutEffect, useRef, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ImagesAnnotationPage.css';\n\n// function ImagesAnnotationPage() {\n//  const { id } = useParams();\n//  const [image, setImage] = useState(null);\n//  const canvasRef = useRef(null);\n//  const [keypoints, setKeypoints] = useState([]);\n//  const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n//  const [lineDistance, setLineDistance] = useState(0);\n//  const [isDragging, setIsDragging] = useState(false);\n//  const [activeKeypoint, setActiveKeypoint] = useState(null);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImagesAnnotationPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [image, setImage] = useState(null);\n  const canvasRef = useRef(null);\n  const [keypoints, setKeypoints] = useState([]);\n  const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n  const [lineDistance, setLineDistance] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [activeKeypoint, setActiveKeypoint] = useState(null);\n  const drawImage = useCallback(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas\n\n    if (image) {\n      const img = new Image();\n      img.onload = () => {\n        context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        // Draw keypoints\n        context.fillStyle = 'red';\n        keypoints.forEach(keypoint => {\n          context.beginPath();\n          context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n          context.fill();\n        });\n\n        // Draw selected keypoints\n        context.fillStyle = 'green';\n        selectedKeypoints.forEach(keypoint => {\n          context.beginPath();\n          context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n          context.fill();\n        });\n\n        // Draw line between selected keypoints\n        context.strokeStyle = 'blue';\n        if (selectedKeypoints.length === 2) {\n          const [kp1, kp2] = selectedKeypoints;\n          context.beginPath();\n          context.moveTo(kp1.x, kp1.y);\n          context.lineTo(kp2.x, kp2.y);\n          context.stroke();\n        }\n      };\n      img.src = image.image;\n    } else {\n      // Image is missing, clear the canvas and display a message\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.fillStyle = 'red';\n      context.font = '24px sans-serif';\n      context.fillText('Image not selected. Go back to the image page and select an image.', 50, 50);\n    }\n  }, [image, keypoints, selectedKeypoints]);\n\n  //  const drawImage = useCallback(() => {\n  //    const canvas = canvasRef.current;\n  //    const context = canvas.getContext('2d');\n  //    const img = new Image();\n  //    img.onload = () => {\n  //      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n  //      // Draw keypoints\n  //      context.fillStyle = 'red';\n  //      keypoints.forEach((keypoint) => {\n  //        context.beginPath();\n  //        context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n  //        context.fill();\n  //      });\n\n  //      // Draw selected keypoints\n  //      context.fillStyle = 'green';\n  //      selectedKeypoints.forEach((keypoint) => {\n  //        context.beginPath();\n  //        context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n  //        context.fill();\n  //      });\n\n  //      // Draw line between selected keypoints\n  //      context.strokeStyle = 'blue';\n  //      if (selectedKeypoints.length === 2) {\n  //        const [kp1, kp2] = selectedKeypoints;\n  //        context.beginPath();\n  //        context.moveTo(kp1.x, kp1.y);\n  //        context.lineTo(kp2.x, kp2.y);\n  //        context.stroke();\n  //      }\n  //    };\n  //    img.src = image.image;\n  //  }, [image, keypoints, selectedKeypoints]);\n\n  const handleCanvasClick = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const clickedKeypoint = keypoints.find(keypoint => {\n      const dx = keypoint.x - x;\n      const dy = keypoint.y - y;\n      return Math.sqrt(dx * dx + dy * dy) <= 5;\n    });\n    if (clickedKeypoint) {\n      handleKeypointDelete(clickedKeypoint);\n    } else {\n      const newKeypoint = {\n        x,\n        y\n      };\n      setKeypoints(prevKeypoints => [...prevKeypoints, newKeypoint]);\n    }\n  };\n  const handleKeypointClick = keypoint => {\n    setSelectedKeypoints(prevSelectedKeypoints => {\n      if (prevSelectedKeypoints.includes(keypoint)) {\n        return prevSelectedKeypoints.filter(kp => kp !== keypoint);\n      } else {\n        return [...prevSelectedKeypoints, keypoint];\n      }\n    });\n  };\n  const handleKeypointDelete = keypoint => {\n    setKeypoints(prevKeypoints => prevKeypoints.filter(kp => kp !== keypoint));\n    setSelectedKeypoints(prevSelectedKeypoints => prevSelectedKeypoints.filter(kp => kp !== keypoint));\n  };\n  const handleKeypointDrag = useCallback(event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    setKeypoints(prevKeypoints => prevKeypoints.map(keypoint => keypoint === activeKeypoint ? {\n      ...keypoint,\n      x,\n      y\n    } : keypoint));\n  }, [activeKeypoint]);\n  const handleMouseDown = (event, keypoint) => {\n    setIsDragging(true);\n    setActiveKeypoint(keypoint);\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setActiveKeypoint(null);\n  };\n  const handleSaveKeypoints = () => {\n    const url = `http://localhost:5000/images/edit/${id}`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(keypoints)\n    }).then(response => response.json()).then(data => {\n      console.log('Keypoints saved:', data);\n    }).catch(error => {\n      console.error('Error saving keypoints:', error);\n    });\n  };\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n    if (isDragging) {\n      canvas.addEventListener('mousemove', handleKeypointDrag);\n      canvas.addEventListener('mouseup', handleMouseUp);\n    } else {\n      canvas.removeEventListener('mousemove', handleKeypointDrag);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      canvas.removeEventListener('mousemove', handleKeypointDrag);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, handleKeypointDrag]);\n  useLayoutEffect(() => {\n    fetch(`http://localhost:5000/images/edit/${id}`).then(res => res.json()).then(data => {\n      setImage(data.data);\n    }).catch(error => {\n      console.log(\"Error fetching image:\", error);\n    });\n  }, [id]);\n  useLayoutEffect(() => {\n    if (image) {\n      drawImage();\n      if (selectedKeypoints.length === 2) {\n        const [kp1, kp2] = selectedKeypoints;\n        const distance = Math.sqrt(Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2));\n        setLineDistance(distance);\n      } else {\n        setLineDistance(0);\n      }\n    }\n  }, [image, keypoints, selectedKeypoints, drawImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"annotate-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Instructions!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"1. If canvas is empty, go to View All Images tab and select an image to annotate.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"2. Use the cursor and place the reddots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"3. Click on save button to save the keypoints\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"4. Select any two points by click on the given co-ordinates of the keypoints to measure the distance between them\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"canvas\",\n      width: 600,\n      height: 600,\n      onMouseDown: handleCanvasClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keypoints\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Keypoints on the image (x,y)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 8\n      }, this), keypoints.map((keypoint, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `keypoint ${selectedKeypoints.includes(keypoint) ? 'selected' : ''}`,\n        onClick: () => handleKeypointClick(keypoint),\n        onMouseDown: event => handleMouseDown(event, keypoint),\n        children: `Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 10\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 6\n    }, this), selectedKeypoints.length === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"distance\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Distance between the two selected points\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 10\n      }, this), `Distance between keypoints is ${lineDistance.toFixed(2)} pixels`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button-savekeypoints\",\n      onClick: handleSaveKeypoints,\n      children: \"Save Keypoints\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 4\n  }, this);\n}\n_s(ImagesAnnotationPage, \"8aVVZKYyV9ip4zGzxY9bqOTE5T4=\", false, function () {\n  return [useParams];\n});\n_c = ImagesAnnotationPage;\nexport default ImagesAnnotationPage;\nvar _c;\n$RefreshReg$(_c, \"ImagesAnnotationPage\");","map":{"version":3,"names":["React","useLayoutEffect","useRef","useState","useCallback","useParams","jsxDEV","_jsxDEV","ImagesAnnotationPage","_s","id","image","setImage","canvasRef","keypoints","setKeypoints","selectedKeypoints","setSelectedKeypoints","lineDistance","setLineDistance","isDragging","setIsDragging","activeKeypoint","setActiveKeypoint","drawImage","canvas","current","context","getContext","clearRect","width","height","img","Image","onload","fillStyle","forEach","keypoint","beginPath","arc","x","y","Math","PI","fill","strokeStyle","length","kp1","kp2","moveTo","lineTo","stroke","src","font","fillText","handleCanvasClick","event","rect","getBoundingClientRect","clientX","left","clientY","top","clickedKeypoint","find","dx","dy","sqrt","handleKeypointDelete","newKeypoint","prevKeypoints","handleKeypointClick","prevSelectedKeypoints","includes","filter","kp","handleKeypointDrag","map","handleMouseDown","handleMouseUp","handleSaveKeypoints","url","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","addEventListener","removeEventListener","res","distance","pow","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onMouseDown","index","onClick","toFixed","_c","$RefreshReg$"],"sources":["/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImagesAnnotationPage.js"],"sourcesContent":["import React, { useLayoutEffect, useRef, useState, useCallback} from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ImagesAnnotationPage.css';\n\n\n// function ImagesAnnotationPage() {\n//  const { id } = useParams();\n//  const [image, setImage] = useState(null);\n//  const canvasRef = useRef(null);\n//  const [keypoints, setKeypoints] = useState([]);\n//  const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n//  const [lineDistance, setLineDistance] = useState(0);\n//  const [isDragging, setIsDragging] = useState(false);\n//  const [activeKeypoint, setActiveKeypoint] = useState(null);\n\nfunction ImagesAnnotationPage() {\n  const { id } = useParams();\n\n  const [image, setImage] = useState(null);\n  const canvasRef = useRef(null);\n  const [keypoints, setKeypoints] = useState([]);\n  const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n  const [lineDistance, setLineDistance] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [activeKeypoint, setActiveKeypoint] = useState(null);\n\n  const drawImage = useCallback(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas\n\n    if (image) {\n      const img = new Image();\n      img.onload = () => {\n        context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        // Draw keypoints\n        context.fillStyle = 'red';\n        keypoints.forEach((keypoint) => {\n          context.beginPath();\n          context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n          context.fill();\n        });\n\n        // Draw selected keypoints\n        context.fillStyle = 'green';\n        selectedKeypoints.forEach((keypoint) => {\n          context.beginPath();\n          context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n          context.fill();\n        });\n\n        // Draw line between selected keypoints\n        context.strokeStyle = 'blue';\n        if (selectedKeypoints.length === 2) {\n          const [kp1, kp2] = selectedKeypoints;\n          context.beginPath();\n          context.moveTo(kp1.x, kp1.y);\n          context.lineTo(kp2.x, kp2.y);\n          context.stroke();\n        }\n      };\n      img.src = image.image;\n    } else {\n      // Image is missing, clear the canvas and display a message\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.fillStyle = 'red';\n      context.font = '24px sans-serif';\n      context.fillText('Image not selected. Go back to the image page and select an image.', 50, 50);\n    }\n  }, [image, keypoints, selectedKeypoints]);\n\n\n//  const drawImage = useCallback(() => {\n//    const canvas = canvasRef.current;\n//    const context = canvas.getContext('2d');\n//    const img = new Image();\n//    img.onload = () => {\n//      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n\n//      // Draw keypoints\n//      context.fillStyle = 'red';\n//      keypoints.forEach((keypoint) => {\n//        context.beginPath();\n//        context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//        context.fill();\n//      });\n\n\n//      // Draw selected keypoints\n//      context.fillStyle = 'green';\n//      selectedKeypoints.forEach((keypoint) => {\n//        context.beginPath();\n//        context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//        context.fill();\n//      });\n\n\n//      // Draw line between selected keypoints\n//      context.strokeStyle = 'blue';\n//      if (selectedKeypoints.length === 2) {\n//        const [kp1, kp2] = selectedKeypoints;\n//        context.beginPath();\n//        context.moveTo(kp1.x, kp1.y);\n//        context.lineTo(kp2.x, kp2.y);\n//        context.stroke();\n//      }\n//    };\n//    img.src = image.image;\n//  }, [image, keypoints, selectedKeypoints]);\n\n\n const handleCanvasClick = (event) => {\n   const canvas = canvasRef.current;\n   const rect = canvas.getBoundingClientRect();\n   const x = event.clientX - rect.left;\n   const y = event.clientY - rect.top;\n\n\n   const clickedKeypoint = keypoints.find((keypoint) => {\n     const dx = keypoint.x - x;\n     const dy = keypoint.y - y;\n     return Math.sqrt(dx * dx + dy * dy) <= 5;\n   });\n\n\n   if (clickedKeypoint) {\n     handleKeypointDelete(clickedKeypoint);\n   } else {\n     const newKeypoint = { x, y };\n     setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n   }\n };\n\n\n const handleKeypointClick = (keypoint) => {\n   setSelectedKeypoints((prevSelectedKeypoints) => {\n     if (prevSelectedKeypoints.includes(keypoint)) {\n       return prevSelectedKeypoints.filter((kp) => kp !== keypoint);\n     } else {\n       return [...prevSelectedKeypoints, keypoint];\n     }\n   });\n };\n\n\n const handleKeypointDelete = (keypoint) => {\n   setKeypoints((prevKeypoints) => prevKeypoints.filter((kp) => kp !== keypoint));\n   setSelectedKeypoints((prevSelectedKeypoints) =>\n     prevSelectedKeypoints.filter((kp) => kp !== keypoint)\n   );\n };\n\n\n const handleKeypointDrag = useCallback((event) => {\n   const canvas = canvasRef.current;\n   const rect = canvas.getBoundingClientRect();\n   const x = event.clientX - rect.left;\n   const y = event.clientY - rect.top;\n\n\n   setKeypoints((prevKeypoints) =>\n     prevKeypoints.map((keypoint) =>\n       keypoint === activeKeypoint ? { ...keypoint, x, y } : keypoint\n     )\n   );\n }, [activeKeypoint]);\n\n\n const handleMouseDown = (event, keypoint) => {\n   setIsDragging(true);\n   setActiveKeypoint(keypoint);\n };\n\n\n const handleMouseUp = () => {\n   setIsDragging(false);\n   setActiveKeypoint(null);\n };\n\n const handleSaveKeypoints = () => {\n  const url = `http://localhost:5000/images/edit/${id}`;\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(keypoints),\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      console.log('Keypoints saved:', data);\n    })\n    .catch((error) => {\n      console.error('Error saving keypoints:', error);\n    });\n};\n\n\n useLayoutEffect(() => {\n   const canvas = canvasRef.current;\n\n\n   if (isDragging) {\n     canvas.addEventListener('mousemove', handleKeypointDrag);\n     canvas.addEventListener('mouseup', handleMouseUp);\n   } else {\n     canvas.removeEventListener('mousemove', handleKeypointDrag);\n     canvas.removeEventListener('mouseup', handleMouseUp);\n   }\n\n\n   return () => {\n     canvas.removeEventListener('mousemove', handleKeypointDrag);\n     canvas.removeEventListener('mouseup', handleMouseUp);\n   };\n }, [isDragging, handleKeypointDrag]);\n\n\n useLayoutEffect(() => {\n   fetch(`http://localhost:5000/images/edit/${id}`)\n     .then((res) => res.json())\n     .then((data) => {\n       setImage(data.data);\n     })\n     .catch((error) => {\n       console.log(\"Error fetching image:\", error);\n     });\n }, [id]);\n\n\n useLayoutEffect(() => {\n   if (image) {\n     drawImage();\n\n\n     if (selectedKeypoints.length === 2) {\n       const [kp1, kp2] = selectedKeypoints;\n       const distance = Math.sqrt(\n         Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n       );\n       setLineDistance(distance);\n     } else {\n       setLineDistance(0);\n     }\n   }\n }, [image, keypoints, selectedKeypoints, drawImage]);\n\n\n return (\n   <div className=\"annotate-div\">\n\n    <h2>Instructions!</h2>\n    <p>\n      1. If canvas is empty, go to View All Images tab and select an image to annotate.\n    </p>\n    <p>\n      2. Use the cursor and place the reddots\n    </p>\n    <p>\n      3. Click on save button to save the keypoints\n    </p>\n    <p>\n      4. Select any two points by click on the given co-ordinates of the keypoints to measure the distance between them\n    </p>\n   \n    <canvas\n      ref={canvasRef}\n      className=\"canvas\"\n      width={600}\n      height={600}\n      onMouseDown={handleCanvasClick}\n    />\n\n\n     <div className=\"keypoints\">\n       <h3>Keypoints on the image (x,y)</h3>\n       {keypoints.map((keypoint, index) => (\n         <div\n           key={index}\n           className={`keypoint ${selectedKeypoints.includes(keypoint) ? 'selected' : ''}`}\n           onClick={() => handleKeypointClick(keypoint)}\n           onMouseDown={(event) => handleMouseDown(event, keypoint)}\n         >\n           {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n         </div>\n       ))}\n     </div>\n\n\n     {selectedKeypoints.length === 2 && (\n       <div className=\"distance\">\n         <h4>Distance between the two selected points</h4>\n         {`Distance between keypoints is ${lineDistance.toFixed(2)} pixels`}\n       </div>\n     )}\n     <button className=\"button-savekeypoints\" onClick={handleSaveKeypoints}>Save Keypoints</button>\n   </div>\n );\n}\n\n\nexport default ImagesAnnotationPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,eAAe,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAO,OAAO;AAC5E,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,4BAA4B;;AAGnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC;EAE1B,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMU,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMqB,SAAS,GAAGpB,WAAW,CAAC,MAAM;IAClC,MAAMqB,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvCD,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC,CAAC,CAAC;;IAEtD,IAAIpB,KAAK,EAAE;MACT,MAAMqB,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,MAAM,GAAG,MAAM;QACjBP,OAAO,CAACH,SAAS,CAACQ,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEP,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;;QAEzD;QACAJ,OAAO,CAACQ,SAAS,GAAG,KAAK;QACzBrB,SAAS,CAACsB,OAAO,CAAEC,QAAQ,IAAK;UAC9BV,OAAO,CAACW,SAAS,CAAC,CAAC;UACnBX,OAAO,CAACY,GAAG,CAACF,QAAQ,CAACG,CAAC,EAAEH,QAAQ,CAACI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGC,IAAI,CAACC,EAAE,CAAC;UACtDhB,OAAO,CAACiB,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC;;QAEF;QACAjB,OAAO,CAACQ,SAAS,GAAG,OAAO;QAC3BnB,iBAAiB,CAACoB,OAAO,CAAEC,QAAQ,IAAK;UACtCV,OAAO,CAACW,SAAS,CAAC,CAAC;UACnBX,OAAO,CAACY,GAAG,CAACF,QAAQ,CAACG,CAAC,EAAEH,QAAQ,CAACI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGC,IAAI,CAACC,EAAE,CAAC;UACtDhB,OAAO,CAACiB,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC;;QAEF;QACAjB,OAAO,CAACkB,WAAW,GAAG,MAAM;QAC5B,IAAI7B,iBAAiB,CAAC8B,MAAM,KAAK,CAAC,EAAE;UAClC,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGhC,iBAAiB;UACpCW,OAAO,CAACW,SAAS,CAAC,CAAC;UACnBX,OAAO,CAACsB,MAAM,CAACF,GAAG,CAACP,CAAC,EAAEO,GAAG,CAACN,CAAC,CAAC;UAC5Bd,OAAO,CAACuB,MAAM,CAACF,GAAG,CAACR,CAAC,EAAEQ,GAAG,CAACP,CAAC,CAAC;UAC5Bd,OAAO,CAACwB,MAAM,CAAC,CAAC;QAClB;MACF,CAAC;MACDnB,GAAG,CAACoB,GAAG,GAAGzC,KAAK,CAACA,KAAK;IACvB,CAAC,MAAM;MACL;MACAgB,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;MACpDJ,OAAO,CAACQ,SAAS,GAAG,KAAK;MACzBR,OAAO,CAAC0B,IAAI,GAAG,iBAAiB;MAChC1B,OAAO,CAAC2B,QAAQ,CAAC,oEAAoE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChG;EACF,CAAC,EAAE,CAAC3C,KAAK,EAAEG,SAAS,EAAEE,iBAAiB,CAAC,CAAC;;EAG3C;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGC,MAAMuC,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAM/B,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAChC,MAAM+B,IAAI,GAAGhC,MAAM,CAACiC,qBAAqB,CAAC,CAAC;IAC3C,MAAMlB,CAAC,GAAGgB,KAAK,CAACG,OAAO,GAAGF,IAAI,CAACG,IAAI;IACnC,MAAMnB,CAAC,GAAGe,KAAK,CAACK,OAAO,GAAGJ,IAAI,CAACK,GAAG;IAGlC,MAAMC,eAAe,GAAGjD,SAAS,CAACkD,IAAI,CAAE3B,QAAQ,IAAK;MACnD,MAAM4B,EAAE,GAAG5B,QAAQ,CAACG,CAAC,GAAGA,CAAC;MACzB,MAAM0B,EAAE,GAAG7B,QAAQ,CAACI,CAAC,GAAGA,CAAC;MACzB,OAAOC,IAAI,CAACyB,IAAI,CAACF,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC,IAAI,CAAC;IAC1C,CAAC,CAAC;IAGF,IAAIH,eAAe,EAAE;MACnBK,oBAAoB,CAACL,eAAe,CAAC;IACvC,CAAC,MAAM;MACL,MAAMM,WAAW,GAAG;QAAE7B,CAAC;QAAEC;MAAE,CAAC;MAC5B1B,YAAY,CAAEuD,aAAa,IAAK,CAAC,GAAGA,aAAa,EAAED,WAAW,CAAC,CAAC;IAClE;EACF,CAAC;EAGD,MAAME,mBAAmB,GAAIlC,QAAQ,IAAK;IACxCpB,oBAAoB,CAAEuD,qBAAqB,IAAK;MAC9C,IAAIA,qBAAqB,CAACC,QAAQ,CAACpC,QAAQ,CAAC,EAAE;QAC5C,OAAOmC,qBAAqB,CAACE,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKtC,QAAQ,CAAC;MAC9D,CAAC,MAAM;QACL,OAAO,CAAC,GAAGmC,qBAAqB,EAAEnC,QAAQ,CAAC;MAC7C;IACF,CAAC,CAAC;EACJ,CAAC;EAGD,MAAM+B,oBAAoB,GAAI/B,QAAQ,IAAK;IACzCtB,YAAY,CAAEuD,aAAa,IAAKA,aAAa,CAACI,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKtC,QAAQ,CAAC,CAAC;IAC9EpB,oBAAoB,CAAEuD,qBAAqB,IACzCA,qBAAqB,CAACE,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKtC,QAAQ,CACtD,CAAC;EACH,CAAC;EAGD,MAAMuC,kBAAkB,GAAGxE,WAAW,CAAEoD,KAAK,IAAK;IAChD,MAAM/B,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAChC,MAAM+B,IAAI,GAAGhC,MAAM,CAACiC,qBAAqB,CAAC,CAAC;IAC3C,MAAMlB,CAAC,GAAGgB,KAAK,CAACG,OAAO,GAAGF,IAAI,CAACG,IAAI;IACnC,MAAMnB,CAAC,GAAGe,KAAK,CAACK,OAAO,GAAGJ,IAAI,CAACK,GAAG;IAGlC/C,YAAY,CAAEuD,aAAa,IACzBA,aAAa,CAACO,GAAG,CAAExC,QAAQ,IACzBA,QAAQ,KAAKf,cAAc,GAAG;MAAE,GAAGe,QAAQ;MAAEG,CAAC;MAAEC;IAAE,CAAC,GAAGJ,QACxD,CACF,CAAC;EACH,CAAC,EAAE,CAACf,cAAc,CAAC,CAAC;EAGpB,MAAMwD,eAAe,GAAGA,CAACtB,KAAK,EAAEnB,QAAQ,KAAK;IAC3ChB,aAAa,CAAC,IAAI,CAAC;IACnBE,iBAAiB,CAACc,QAAQ,CAAC;EAC7B,CAAC;EAGD,MAAM0C,aAAa,GAAGA,CAAA,KAAM;IAC1B1D,aAAa,CAAC,KAAK,CAAC;IACpBE,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAMyD,mBAAmB,GAAGA,CAAA,KAAM;IACjC,MAAMC,GAAG,GAAI,qCAAoCvE,EAAG,EAAC;IACrDwE,KAAK,CAACD,GAAG,EAAE;MACTE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACzE,SAAS;IAChC,CAAC,CAAC,CACC0E,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,IAAI,CAAC;IACvC,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CAAC;EACN,CAAC;EAGA9F,eAAe,CAAC,MAAM;IACpB,MAAMwB,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAGhC,IAAIN,UAAU,EAAE;MACdK,MAAM,CAACuE,gBAAgB,CAAC,WAAW,EAAEpB,kBAAkB,CAAC;MACxDnD,MAAM,CAACuE,gBAAgB,CAAC,SAAS,EAAEjB,aAAa,CAAC;IACnD,CAAC,MAAM;MACLtD,MAAM,CAACwE,mBAAmB,CAAC,WAAW,EAAErB,kBAAkB,CAAC;MAC3DnD,MAAM,CAACwE,mBAAmB,CAAC,SAAS,EAAElB,aAAa,CAAC;IACtD;IAGA,OAAO,MAAM;MACXtD,MAAM,CAACwE,mBAAmB,CAAC,WAAW,EAAErB,kBAAkB,CAAC;MAC3DnD,MAAM,CAACwE,mBAAmB,CAAC,SAAS,EAAElB,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAAC3D,UAAU,EAAEwD,kBAAkB,CAAC,CAAC;EAGpC3E,eAAe,CAAC,MAAM;IACpBiF,KAAK,CAAE,qCAAoCxE,EAAG,EAAC,CAAC,CAC7C8E,IAAI,CAAEU,GAAG,IAAKA,GAAG,CAACR,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACd/E,QAAQ,CAAC+E,IAAI,CAACA,IAAI,CAAC;IACrB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,KAAK,CAAC;IAC7C,CAAC,CAAC;EACN,CAAC,EAAE,CAACrF,EAAE,CAAC,CAAC;EAGRT,eAAe,CAAC,MAAM;IACpB,IAAIU,KAAK,EAAE;MACTa,SAAS,CAAC,CAAC;MAGX,IAAIR,iBAAiB,CAAC8B,MAAM,KAAK,CAAC,EAAE;QAClC,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGhC,iBAAiB;QACpC,MAAMmF,QAAQ,GAAGzD,IAAI,CAACyB,IAAI,CACxBzB,IAAI,CAAC0D,GAAG,CAACpD,GAAG,CAACR,CAAC,GAAGO,GAAG,CAACP,CAAC,EAAE,CAAC,CAAC,GAAGE,IAAI,CAAC0D,GAAG,CAACpD,GAAG,CAACP,CAAC,GAAGM,GAAG,CAACN,CAAC,EAAE,CAAC,CACxD,CAAC;QACDtB,eAAe,CAACgF,QAAQ,CAAC;MAC3B,CAAC,MAAM;QACLhF,eAAe,CAAC,CAAC,CAAC;MACpB;IACF;EACF,CAAC,EAAE,CAACR,KAAK,EAAEG,SAAS,EAAEE,iBAAiB,EAAEQ,SAAS,CAAC,CAAC;EAGpD,oBACEjB,OAAA;IAAK8F,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAE5B/F,OAAA;MAAA+F,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBnG,OAAA;MAAA+F,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJnG,OAAA;MAAA+F,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJnG,OAAA;MAAA+F,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJnG,OAAA;MAAA+F,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAEJnG,OAAA;MACEoG,GAAG,EAAE9F,SAAU;MACfwF,SAAS,EAAC,QAAQ;MAClBvE,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE,GAAI;MACZ6E,WAAW,EAAErD;IAAkB;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eAGDnG,OAAA;MAAK8F,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxB/F,OAAA;QAAA+F,QAAA,EAAI;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACpC5F,SAAS,CAAC+D,GAAG,CAAC,CAACxC,QAAQ,EAAEwE,KAAK,kBAC7BtG,OAAA;QAEE8F,SAAS,EAAG,YAAWrF,iBAAiB,CAACyD,QAAQ,CAACpC,QAAQ,CAAC,GAAG,UAAU,GAAG,EAAG,EAAE;QAChFyE,OAAO,EAAEA,CAAA,KAAMvC,mBAAmB,CAAClC,QAAQ,CAAE;QAC7CuE,WAAW,EAAGpD,KAAK,IAAKsB,eAAe,CAACtB,KAAK,EAAEnB,QAAQ,CAAE;QAAAiE,QAAA,EAEvD,YAAWO,KAAK,GAAG,CAAE,MAAKxE,QAAQ,CAACG,CAAE,KAAIH,QAAQ,CAACI,CAAE;MAAE,GALnDoE,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMP,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAGL1F,iBAAiB,CAAC8B,MAAM,KAAK,CAAC,iBAC7BvC,OAAA;MAAK8F,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvB/F,OAAA;QAAA+F,QAAA,EAAI;MAAwC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC/C,iCAAgCxF,YAAY,CAAC6F,OAAO,CAAC,CAAC,CAAE,SAAQ;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CACN,eACDnG,OAAA;MAAQ8F,SAAS,EAAC,sBAAsB;MAACS,OAAO,EAAE9B,mBAAoB;MAAAsB,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3F,CAAC;AAET;AAACjG,EAAA,CA7RQD,oBAAoB;EAAA,QACZH,SAAS;AAAA;AAAA2G,EAAA,GADjBxG,oBAAoB;AAgS7B,eAAeA,oBAAoB;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}