{"ast":null,"code":"var _jsxFileName = \"/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/UploadPage.js\",\n  _s = $RefreshSig$();\n// import React, {useState } from 'react';\nimport './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   function convertToBase64(e) {\n//     console.log(e);\n//     var reader = new FileReader();\n//     reader.readAsDataURL(e.target.files[0]);\n//     reader.onload = () => {\n//         console.log(reader.result); //base64encoded string  \n//         setImage(reader.result);\n//     };\n//     reader.onerror = error => {\n//         console.log(\"Error: \", error);\n//         console.log(\"This is Base64 error: \", error);\n//     };\n// }\n\n// function uploadImage() {\n//   fetch(\"http://localhost:5000/images/upload\", {\n//       method: \"POST\",\n//       crossDomain: true,\n//       headers: {\n//           \"Content-Type\": \"application/json\",\n//           Accept: \"application/json\",\n//           \"Access-Control-Allow-Origin\": \"*\",\n//       },\n//       body: JSON.stringify({\n//           base64: image\n//       })\n//   }).then((res) => res.json()).then((data) =>{\n//     console.log(data);\n//     setIsModalOpen(true);\n\n//   }\n\n//     )\n//   .catch((error) => {\n//     console.error(error);\n\n//   });\n// }\n// function closeModal() {\n//   setIsModalOpen(false);\n// }\n\n//   return (\n\n//         <div className='upload'>\n\n//             <h3>Upload the Image you want to anonotate and measure</h3>\n//             <h4>Steps to annotate you images</h4>\n//             <p>\n//               1. Upload an image by choosing a file by clicking on upload button\n//             </p>\n//             <p>\n//               2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\n//             </p>\n//             <p>\n//               3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\n//             </p>\n//             <input\n//                 accept=\"image/*\"\n//                 type=\"file\"\n//                 id=\"file\"\n//                 onChange={convertToBase64}\n//             />\n//             <label htmlFor=\"file\" className=\"label-file\"><i className='material-icons'>add_photo_alternate</i>Choose an Image</label>\n//             {image === \"\" || image == null ? \"\" : <img alt=\"UploadedImage\" width={300} height={300} src={image} className=\"imageUploded\" />}\n//           <div>\n//             <button className=\"button-upload\" disabled={image === \"\" || image === null} onClick={() => {uploadImage(); }}>Upload Image</button>\n\n//           </div>\n//           {isModalOpen && (\n//         <div className=\"modal\">\n//           <div className=\"modal-content\">\n//             <h2>Image Uploaded!</h2>\n//             <p>To see images, click on the Images Page</p>\n//             <button className=\"modal-close\" onClick={closeModal}>\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//         </div>\n\n//   );\n// }\n\n// export default UploadPage;\n// import React, { useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n// function convertToBase64(e) {\n//   const file = e.target.files[0];\n//   const reader = new FileReader();\n\n//   reader.onload = () => {\n//     const base64Image = reader.result.split(',')[1]; // Extract the base64-encoded image data\n//     setImage({\n//       base64: base64Image,\n\n//     });\n//   }\n\n//   reader.onerror = error => {\n//     console.log(\"Error: \", error);\n//     console.log(\"This is Base64 error: \", error);\n//   };\n\n//   reader.readAsDataURL(file);\n// }\n\nimport React, { useState } from 'react';\nimport './UploadPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadPage() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    convertToBase64(file);\n  };\n  const convertToBase64 = file => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      setImage(reader.result);\n    };\n  };\n  const uploadImage = () => {\n    fetch('http://localhost:5000/images/upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        image: image\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      setIsModalOpen(true);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload the Image you want to annotate and measure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Uploaded\",\n      width: 300,\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !image,\n      onClick: uploadImage,\n      children: \"Upload Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Image Uploaded!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"To see images, click on the Images Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 7\n  }, this);\n}\n_s(UploadPage, \"XOxFfE1HAoLzs5LGxLgFf38ejvk=\");\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadPage","_s","image","setImage","isModalOpen","setIsModalOpen","handleImageUpload","e","file","target","files","convertToBase64","reader","FileReader","readAsDataURL","onload","result","uploadImage","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","catch","error","closeModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","src","alt","width","height","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/UploadPage.js"],"sourcesContent":["// import React, {useState } from 'react';\nimport './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   function convertToBase64(e) {\n//     console.log(e);\n//     var reader = new FileReader();\n//     reader.readAsDataURL(e.target.files[0]);\n//     reader.onload = () => {\n//         console.log(reader.result); //base64encoded string  \n//         setImage(reader.result);\n//     };\n//     reader.onerror = error => {\n//         console.log(\"Error: \", error);\n//         console.log(\"This is Base64 error: \", error);\n//     };\n// }\n\n\n// function uploadImage() {\n//   fetch(\"http://localhost:5000/images/upload\", {\n//       method: \"POST\",\n//       crossDomain: true,\n//       headers: {\n//           \"Content-Type\": \"application/json\",\n//           Accept: \"application/json\",\n//           \"Access-Control-Allow-Origin\": \"*\",\n//       },\n//       body: JSON.stringify({\n//           base64: image\n//       })\n//   }).then((res) => res.json()).then((data) =>{\n//     console.log(data);\n//     setIsModalOpen(true);\n    \n//   }\n  \n    \n  \n//     )\n//   .catch((error) => {\n//     console.error(error);\n\n    \n//   });\n// }\n// function closeModal() {\n//   setIsModalOpen(false);\n// }\n\n\n//   return (\n   \n//         <div className='upload'>\n            \n//             <h3>Upload the Image you want to anonotate and measure</h3>\n//             <h4>Steps to annotate you images</h4>\n//             <p>\n//               1. Upload an image by choosing a file by clicking on upload button\n//             </p>\n//             <p>\n//               2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\n//             </p>\n//             <p>\n//               3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\n//             </p>\n//             <input\n//                 accept=\"image/*\"\n//                 type=\"file\"\n//                 id=\"file\"\n//                 onChange={convertToBase64}\n//             />\n//             <label htmlFor=\"file\" className=\"label-file\"><i className='material-icons'>add_photo_alternate</i>Choose an Image</label>\n//             {image === \"\" || image == null ? \"\" : <img alt=\"UploadedImage\" width={300} height={300} src={image} className=\"imageUploded\" />}\n//           <div>\n//             <button className=\"button-upload\" disabled={image === \"\" || image === null} onClick={() => {uploadImage(); }}>Upload Image</button>\n          \n            \n//           </div>\n//           {isModalOpen && (\n//         <div className=\"modal\">\n//           <div className=\"modal-content\">\n//             <h2>Image Uploaded!</h2>\n//             <p>To see images, click on the Images Page</p>\n//             <button className=\"modal-close\" onClick={closeModal}>\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n            \n            \n//         </div>\n    \n//   );\n// }\n\n// export default UploadPage;\n// import React, { useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // function convertToBase64(e) {\n  //   const file = e.target.files[0];\n  //   const reader = new FileReader();\n  \n  //   reader.onload = () => {\n  //     const base64Image = reader.result.split(',')[1]; // Extract the base64-encoded image data\n  //     setImage({\n  //       base64: base64Image,\n       \n  //     });\n  //   }\n  \n  //   reader.onerror = error => {\n  //     console.log(\"Error: \", error);\n  //     console.log(\"This is Base64 error: \", error);\n  //   };\n  \n  //   reader.readAsDataURL(file);\n  // }\n\n\n\n  import React, { useState } from 'react';\n  import './UploadPage.css';\n  \n  function UploadPage() {\n    const [image, setImage] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n  \n    const handleImageUpload = (e) => {\n      const file = e.target.files[0];\n      convertToBase64(file);\n    };\n  \n    const convertToBase64 = (file) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        setImage(reader.result);\n      };\n    };\n  \n    const uploadImage = () => {\n      fetch('http://localhost:5000/images/upload', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: image\n        })\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data);\n          setIsModalOpen(true);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    };\n  \n    const closeModal = () => {\n      setIsModalOpen(false);\n    };\n  \n    return (\n      <div className='upload'>\n        <h3>Upload the Image you want to annotate and measure</h3>\n        <input\n          type='file'\n          accept='image/*'\n          onChange={handleImageUpload}\n        />\n        {image && (\n          <img src={image} alt='Uploaded' width={300} height={300} />\n        )}\n        <button disabled={!image} onClick={uploadImage}>Upload Image</button>\n  \n        {isModalOpen && (\n          <div className='modal'>\n            <div className='modal-content'>\n              <h2>Image Uploaded!</h2>\n              <p>To see images, click on the Images Page</p>\n              <button onClick={closeModal}>Close</button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n  \n  export default UploadPage;\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}