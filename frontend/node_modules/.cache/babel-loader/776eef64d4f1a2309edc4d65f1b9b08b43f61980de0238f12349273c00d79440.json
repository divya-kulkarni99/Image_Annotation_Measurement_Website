{"ast":null,"code":"// import React, { useEffect, useRef, useState, useCallback } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './ImagesAnnotationPage.css';\n\n// function ImagesAnnotationPage() {\n//   const { id } = useParams();\n//   const [image, setImage] = useState(null);\n//   const canvasRef = useRef(null);\n//   const [keypoints, setKeypoints] = useState([]);\n//   const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n//   const [lineDistance, setLineDistance] = useState(0);\n\n//   const drawImage = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     const img = new Image();\n//     img.onload = () => {\n//       context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//     };\n//     img.src = image.image;\n//   }, [image]);\n\n//   const drawKeypoints = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'red';\n//     keypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   }, [keypoints]);\n\n//   const drawSelectedKeypoints = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'green';\n//     selectedKeypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   }, [selectedKeypoints]);\n\n//   const drawLine = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.strokeStyle = 'blue';\n//     if (selectedKeypoints.length === 2) {\n//       const [kp1, kp2] = selectedKeypoints;\n//       context.beginPath();\n//       context.moveTo(kp1.x, kp1.y);\n//       context.lineTo(kp2.x, kp2.y);\n//       context.stroke();\n//     }\n//   }, [selectedKeypoints]);\n\n//   const handleCanvasClick = (event) => {\n//     const canvas = canvasRef.current;\n//     const rect = canvas.getBoundingClientRect();\n//     const x = event.clientX - rect.left;\n//     const y = event.clientY - rect.top;\n//     const newKeypoint = { x, y };\n//     setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n//   };\n\n//   const handleKeypointClick = (keypoint) => {\n//     setSelectedKeypoints((prevSelectedKeypoints) => {\n//       if (prevSelectedKeypoints.includes(keypoint)) {\n//         return prevSelectedKeypoints.filter((kp) => kp !== keypoint);\n//       } else {\n//         return [...prevSelectedKeypoints, keypoint];\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     fetch(`http://localhost:5000/images/edit/${id}`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setImage(data.data);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error fetching image:\", error);\n//       });\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (image) {\n//       const canvas = canvasRef.current;\n//       const context = canvas.getContext('2d');\n//       context.clearRect(0, 0, canvas.width, canvas.height);\n//       drawImage();\n//       drawKeypoints();\n//       drawSelectedKeypoints();\n//       drawLine();\n\n//       if (selectedKeypoints.length === 2) {\n//         const [kp1, kp2] = selectedKeypoints;\n//         const distance = Math.sqrt(\n//           Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n//         );\n//         setLineDistance(distance);\n//       } else {\n//         setLineDistance(0);\n//       }\n//     }\n//   }, [image, keypoints, selectedKeypoints, drawImage, drawKeypoints, drawSelectedKeypoints, drawLine]);\n\n//   return (\n//     <div className=\"container\">\n//       {/* {image && (\n//         <img\n//           alt=\"Clicked_Image\"\n//           width={600}\n//           height={600}\n//           src={image.image}\n//         />\n//       )} */}\n\n//       <canvas\n//         ref={canvasRef}\n//         className=\"canvas\"\n//         width={600}\n//         height={600}\n//         onClick={handleCanvasClick}\n//       />\n//       <div className=\"keypoints\">\n//         <h4>Keypoints:</h4>\n//         {keypoints.map((keypoint, index) => (\n//           <div\n//             key={index}\n//             className={`keypoint ${selectedKeypoints.includes(keypoint) ? 'selected' : ''}`}\n//             onClick={() => handleKeypointClick(keypoint)}\n//           >\n//             {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n//           </div>\n//         ))}\n//       </div>\n//       {selectedKeypoints.length === 2 && (\n//         <div>\n//           <h4>Distance:</h4>\n//           {`Distance between keypoints: ${lineDistance.toFixed(2)} pixels`}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ImagesAnnotationPage;","map":{"version":3,"names":[],"sources":["/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImagesAnnotationPage.js"],"sourcesContent":["// import React, { useEffect, useRef, useState, useCallback } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './ImagesAnnotationPage.css';\n\n// function ImagesAnnotationPage() {\n//   const { id } = useParams();\n//   const [image, setImage] = useState(null);\n//   const canvasRef = useRef(null);\n//   const [keypoints, setKeypoints] = useState([]);\n//   const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n//   const [lineDistance, setLineDistance] = useState(0);\n\n//   const drawImage = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     const img = new Image();\n//     img.onload = () => {\n//       context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//     };\n//     img.src = image.image;\n//   }, [image]);\n\n//   const drawKeypoints = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'red';\n//     keypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   }, [keypoints]);\n\n//   const drawSelectedKeypoints = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'green';\n//     selectedKeypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   }, [selectedKeypoints]);\n\n//   const drawLine = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.strokeStyle = 'blue';\n//     if (selectedKeypoints.length === 2) {\n//       const [kp1, kp2] = selectedKeypoints;\n//       context.beginPath();\n//       context.moveTo(kp1.x, kp1.y);\n//       context.lineTo(kp2.x, kp2.y);\n//       context.stroke();\n//     }\n//   }, [selectedKeypoints]);\n\n//   const handleCanvasClick = (event) => {\n//     const canvas = canvasRef.current;\n//     const rect = canvas.getBoundingClientRect();\n//     const x = event.clientX - rect.left;\n//     const y = event.clientY - rect.top;\n//     const newKeypoint = { x, y };\n//     setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n//   };\n\n//   const handleKeypointClick = (keypoint) => {\n//     setSelectedKeypoints((prevSelectedKeypoints) => {\n//       if (prevSelectedKeypoints.includes(keypoint)) {\n//         return prevSelectedKeypoints.filter((kp) => kp !== keypoint);\n//       } else {\n//         return [...prevSelectedKeypoints, keypoint];\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     fetch(`http://localhost:5000/images/edit/${id}`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setImage(data.data);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error fetching image:\", error);\n//       });\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (image) {\n//       const canvas = canvasRef.current;\n//       const context = canvas.getContext('2d');\n//       context.clearRect(0, 0, canvas.width, canvas.height);\n//       drawImage();\n//       drawKeypoints();\n//       drawSelectedKeypoints();\n//       drawLine();\n\n//       if (selectedKeypoints.length === 2) {\n//         const [kp1, kp2] = selectedKeypoints;\n//         const distance = Math.sqrt(\n//           Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n//         );\n//         setLineDistance(distance);\n//       } else {\n//         setLineDistance(0);\n//       }\n//     }\n//   }, [image, keypoints, selectedKeypoints, drawImage, drawKeypoints, drawSelectedKeypoints, drawLine]);\n\n//   return (\n//     <div className=\"container\">\n//       {/* {image && (\n//         <img\n//           alt=\"Clicked_Image\"\n//           width={600}\n//           height={600}\n//           src={image.image}\n//         />\n//       )} */}\n\n//       <canvas\n//         ref={canvasRef}\n//         className=\"canvas\"\n//         width={600}\n//         height={600}\n//         onClick={handleCanvasClick}\n//       />\n//       <div className=\"keypoints\">\n//         <h4>Keypoints:</h4>\n//         {keypoints.map((keypoint, index) => (\n//           <div\n//             key={index}\n//             className={`keypoint ${selectedKeypoints.includes(keypoint) ? 'selected' : ''}`}\n//             onClick={() => handleKeypointClick(keypoint)}\n//           >\n//             {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n//           </div>\n//         ))}\n//       </div>\n//       {selectedKeypoints.length === 2 && (\n//         <div>\n//           <h4>Distance:</h4>\n//           {`Distance between keypoints: ${lineDistance.toFixed(2)} pixels`}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ImagesAnnotationPage;\n\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}