{"ast":null,"code":"var _jsxFileName = \"/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImagesAnnotationPage.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState, useCallback, useLayoutEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './ImagesAnnotationPage.css';\n\n// function ImagesAnnotationPage() {\n//   const { id } = useParams();\n//   const [image, setImage] = useState(null);\n//   const canvasRef = useRef(null);\n//   const [keypoints, setKeypoints] = useState([]);\n//   const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n//   const [lineDistance, setLineDistance] = useState(0);\n\n//   const drawImage = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     const img = new Image();\n//     img.onload = () => {\n//       context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//     };\n//     img.src = image.image;\n//   }, [image]);\n\n//   const drawKeypoints = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'red';\n//     keypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   }, [keypoints]);\n\n//   const drawSelectedKeypoints = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'green';\n//     selectedKeypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   }, [selectedKeypoints]);\n\n//   const drawLine = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.strokeStyle = 'blue';\n//     if (selectedKeypoints.length === 2) {\n//       const [kp1, kp2] = selectedKeypoints;\n//       context.beginPath();\n//       context.moveTo(kp1.x, kp1.y);\n//       context.lineTo(kp2.x, kp2.y);\n//       context.stroke();\n//     }\n//   }, [selectedKeypoints]);\n\n//   const handleCanvasClick = (event) => {\n//     const canvas = canvasRef.current;\n//     const rect = canvas.getBoundingClientRect();\n//     const x = event.clientX - rect.left;\n//     const y = event.clientY - rect.top;\n//     const newKeypoint = { x, y };\n//     setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n//   };\n\n//   const handleKeypointClick = (keypoint) => {\n//     setSelectedKeypoints((prevSelectedKeypoints) => {\n//       if (prevSelectedKeypoints.includes(keypoint)) {\n//         return prevSelectedKeypoints.filter((kp) => kp !== keypoint);\n//       } else {\n//         return [...prevSelectedKeypoints, keypoint];\n//       }\n//     });\n//   };\n\n//   useLayoutEffect(() => {\n//     fetch(`http://localhost:5000/images/edit/${id}`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setImage(data.data);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error fetching image:\", error);\n//       });\n//   }, [id]);\n\n//   useLayoutEffect(() => {\n//     if (image) {\n//       const canvas = canvasRef.current;\n//       const context = canvas.getContext('2d');\n//       context.clearRect(0, 0, canvas.width, canvas.height);\n//       drawImage();\n//       drawKeypoints();\n//       drawSelectedKeypoints();\n//       drawLine();\n\n//       if (selectedKeypoints.length === 2) {\n//         const [kp1, kp2] = selectedKeypoints;\n//         const distance = Math.sqrt(\n//           Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n//         );\n//         setLineDistance(distance);\n//       } else {\n//         setLineDistance(0);\n//       }\n//     }\n//   }, [image, keypoints, selectedKeypoints, drawImage, drawKeypoints, drawSelectedKeypoints, drawLine]);\n\n//   return (\n//     <div className=\"container\">\n//       {/* {image && (\n//         <img\n//           alt=\"Clicked_Image\"\n//           width={600}\n//           height={600}\n//           src={image.image}\n//         />\n//       )} */}\n\n//       <canvas\n//         ref={canvasRef}\n//         className=\"canvas\"\n//         width={600}\n//         height={600}\n//         onClick={handleCanvasClick}\n//       />\n//       <div className=\"keypoints\">\n//         <h4>Keypoints:</h4>\n//         {keypoints.map((keypoint, index) => (\n//           <div\n//             key={index}\n//             className={`keypoint ${selectedKeypoints.includes(keypoint) ? 'selected' : ''}`}\n//             onClick={() => handleKeypointClick(keypoint)}\n//           >\n//             {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n//           </div>\n//         ))}\n//       </div>\n//       {selectedKeypoints.length === 2 && (\n//         <div className=\"distance\">\n//           <h4>Distance:</h4>\n//           {`Distance between keypoints: ${lineDistance.toFixed(2)} pixels`}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ImagesAnnotationPage;\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ImagesAnnotationPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImagesAnnotationPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [image, setImage] = useState(null);\n  const canvasRef = useRef(null);\n  const [keypoints, setKeypoints] = useState([]);\n  const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n  const [lineDistance, setLineDistance] = useState(0);\n  const drawImage = useCallback(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      // Draw keypoints\n      context.fillStyle = 'red';\n      keypoints.forEach(keypoint => {\n        context.beginPath();\n        context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n        context.fill();\n      });\n\n      // Draw selected keypoints\n      context.fillStyle = 'green';\n      selectedKeypoints.forEach(keypoint => {\n        context.beginPath();\n        context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n        context.fill();\n      });\n\n      // Draw line between selected keypoints\n      context.strokeStyle = 'blue';\n      if (selectedKeypoints.length === 2) {\n        const [kp1, kp2] = selectedKeypoints;\n        context.beginPath();\n        context.moveTo(kp1.x, kp1.y);\n        context.lineTo(kp2.x, kp2.y);\n        context.stroke();\n      }\n    };\n    img.src = image.image;\n  }, [image, keypoints, selectedKeypoints]);\n  const handleCanvasClick = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const newKeypoint = {\n      x,\n      y\n    };\n    setKeypoints(prevKeypoints => [...prevKeypoints, newKeypoint]);\n  };\n  const handleKeypointClick = keypoint => {\n    setSelectedKeypoints(prevSelectedKeypoints => {\n      if (prevSelectedKeypoints.includes(keypoint)) {\n        return prevSelectedKeypoints.filter(kp => kp !== keypoint);\n      } else {\n        return [...prevSelectedKeypoints, keypoint];\n      }\n    });\n  };\n  useEffect(() => {\n    fetch(`http://localhost:5000/images/edit/${id}`).then(res => res.json()).then(data => {\n      setImage(data.data);\n    }).catch(error => {\n      console.log(\"Error fetching image:\", error);\n    });\n  }, [id]);\n  useEffect(() => {\n    if (image) {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      drawImage();\n      if (selectedKeypoints.length === 2) {\n        const [kp1, kp2] = selectedKeypoints;\n        const distance = Math.sqrt(Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2));\n        setLineDistance(distance);\n      } else {\n        setLineDistance(0);\n      }\n    }\n  }, [image, selectedKeypoints, drawImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [image && /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"Clicked_Image\",\n      width: 600,\n      height: 600,\n      src: image.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"canvas\",\n      width: 600,\n      height: 600,\n      onClick: handleCanvasClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keypoints\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Keypoints:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), keypoints.map((keypoint, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `keypoint ${selectedKeypoints.includes(keypoint) ? 'selected' : ''}`,\n        onClick: () => handleKeypointClick(keypoint),\n        children: `Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), selectedKeypoints.length === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"distance\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Distance:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), `Distance between keypoints: ${lineDistance.toFixed(2)} pixels`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n}\n_s(ImagesAnnotationPage, \"3yzgz4c76c/BcIsqz7K0tlHSYzo=\", false, function () {\n  return [useParams];\n});\n_c = ImagesAnnotationPage;\nexport default ImagesAnnotationPage;\nvar _c;\n$RefreshReg$(_c, \"ImagesAnnotationPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","useParams","jsxDEV","_jsxDEV","ImagesAnnotationPage","_s","id","image","setImage","canvasRef","keypoints","setKeypoints","selectedKeypoints","setSelectedKeypoints","lineDistance","setLineDistance","drawImage","canvas","current","context","getContext","img","Image","onload","width","height","fillStyle","forEach","keypoint","beginPath","arc","x","y","Math","PI","fill","strokeStyle","length","kp1","kp2","moveTo","lineTo","stroke","src","handleCanvasClick","event","rect","getBoundingClientRect","clientX","left","clientY","top","newKeypoint","prevKeypoints","handleKeypointClick","prevSelectedKeypoints","includes","filter","kp","fetch","then","res","json","data","catch","error","console","log","clearRect","distance","sqrt","pow","className","children","alt","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","map","index","toFixed","_c","$RefreshReg$"],"sources":["/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImagesAnnotationPage.js"],"sourcesContent":["// import React, { useRef, useState, useCallback, useLayoutEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './ImagesAnnotationPage.css';\n\n// function ImagesAnnotationPage() {\n//   const { id } = useParams();\n//   const [image, setImage] = useState(null);\n//   const canvasRef = useRef(null);\n//   const [keypoints, setKeypoints] = useState([]);\n//   const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n//   const [lineDistance, setLineDistance] = useState(0);\n\n//   const drawImage = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     const img = new Image();\n//     img.onload = () => {\n//       context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//     };\n//     img.src = image.image;\n//   }, [image]);\n\n//   const drawKeypoints = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'red';\n//     keypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   }, [keypoints]);\n\n//   const drawSelectedKeypoints = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.fillStyle = 'green';\n//     selectedKeypoints.forEach((keypoint) => {\n//       context.beginPath();\n//       context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n//       context.fill();\n//     });\n//   }, [selectedKeypoints]);\n\n//   const drawLine = useCallback(() => {\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.strokeStyle = 'blue';\n//     if (selectedKeypoints.length === 2) {\n//       const [kp1, kp2] = selectedKeypoints;\n//       context.beginPath();\n//       context.moveTo(kp1.x, kp1.y);\n//       context.lineTo(kp2.x, kp2.y);\n//       context.stroke();\n//     }\n//   }, [selectedKeypoints]);\n\n//   const handleCanvasClick = (event) => {\n//     const canvas = canvasRef.current;\n//     const rect = canvas.getBoundingClientRect();\n//     const x = event.clientX - rect.left;\n//     const y = event.clientY - rect.top;\n//     const newKeypoint = { x, y };\n//     setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n//   };\n\n//   const handleKeypointClick = (keypoint) => {\n//     setSelectedKeypoints((prevSelectedKeypoints) => {\n//       if (prevSelectedKeypoints.includes(keypoint)) {\n//         return prevSelectedKeypoints.filter((kp) => kp !== keypoint);\n//       } else {\n//         return [...prevSelectedKeypoints, keypoint];\n//       }\n//     });\n//   };\n\n//   useLayoutEffect(() => {\n//     fetch(`http://localhost:5000/images/edit/${id}`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setImage(data.data);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error fetching image:\", error);\n//       });\n//   }, [id]);\n\n//   useLayoutEffect(() => {\n//     if (image) {\n//       const canvas = canvasRef.current;\n//       const context = canvas.getContext('2d');\n//       context.clearRect(0, 0, canvas.width, canvas.height);\n//       drawImage();\n//       drawKeypoints();\n//       drawSelectedKeypoints();\n//       drawLine();\n\n//       if (selectedKeypoints.length === 2) {\n//         const [kp1, kp2] = selectedKeypoints;\n//         const distance = Math.sqrt(\n//           Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n//         );\n//         setLineDistance(distance);\n//       } else {\n//         setLineDistance(0);\n//       }\n//     }\n//   }, [image, keypoints, selectedKeypoints, drawImage, drawKeypoints, drawSelectedKeypoints, drawLine]);\n\n//   return (\n//     <div className=\"container\">\n//       {/* {image && (\n//         <img\n//           alt=\"Clicked_Image\"\n//           width={600}\n//           height={600}\n//           src={image.image}\n//         />\n//       )} */}\n\n//       <canvas\n//         ref={canvasRef}\n//         className=\"canvas\"\n//         width={600}\n//         height={600}\n//         onClick={handleCanvasClick}\n//       />\n//       <div className=\"keypoints\">\n//         <h4>Keypoints:</h4>\n//         {keypoints.map((keypoint, index) => (\n//           <div\n//             key={index}\n//             className={`keypoint ${selectedKeypoints.includes(keypoint) ? 'selected' : ''}`}\n//             onClick={() => handleKeypointClick(keypoint)}\n//           >\n//             {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n//           </div>\n//         ))}\n//       </div>\n//       {selectedKeypoints.length === 2 && (\n//         <div className=\"distance\">\n//           <h4>Distance:</h4>\n//           {`Distance between keypoints: ${lineDistance.toFixed(2)} pixels`}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ImagesAnnotationPage;\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ImagesAnnotationPage.css';\n\nfunction ImagesAnnotationPage() {\n  const { id } = useParams();\n  const [image, setImage] = useState(null);\n  const canvasRef = useRef(null);\n  const [keypoints, setKeypoints] = useState([]);\n  const [selectedKeypoints, setSelectedKeypoints] = useState([]);\n  const [lineDistance, setLineDistance] = useState(0);\n\n  const drawImage = useCallback(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      // Draw keypoints\n      context.fillStyle = 'red';\n      keypoints.forEach((keypoint) => {\n        context.beginPath();\n        context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n        context.fill();\n      });\n\n      // Draw selected keypoints\n      context.fillStyle = 'green';\n      selectedKeypoints.forEach((keypoint) => {\n        context.beginPath();\n        context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n        context.fill();\n      });\n\n      // Draw line between selected keypoints\n      context.strokeStyle = 'blue';\n      if (selectedKeypoints.length === 2) {\n        const [kp1, kp2] = selectedKeypoints;\n        context.beginPath();\n        context.moveTo(kp1.x, kp1.y);\n        context.lineTo(kp2.x, kp2.y);\n        context.stroke();\n      }\n    };\n    img.src = image.image;\n  }, [image, keypoints, selectedKeypoints]);\n\n  const handleCanvasClick = (event) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const newKeypoint = { x, y };\n    setKeypoints((prevKeypoints) => [...prevKeypoints, newKeypoint]);\n  };\n\n  const handleKeypointClick = (keypoint) => {\n    setSelectedKeypoints((prevSelectedKeypoints) => {\n      if (prevSelectedKeypoints.includes(keypoint)) {\n        return prevSelectedKeypoints.filter((kp) => kp !== keypoint);\n      } else {\n        return [...prevSelectedKeypoints, keypoint];\n      }\n    });\n  };\n\n  useEffect(() => {\n    fetch(`http://localhost:5000/images/edit/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        setImage(data.data);\n      })\n      .catch((error) => {\n        console.log(\"Error fetching image:\", error);\n      });\n  }, [id]);\n\n  useEffect(() => {\n    if (image) {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      drawImage();\n\n      if (selectedKeypoints.length === 2) {\n        const [kp1, kp2] = selectedKeypoints;\n        const distance = Math.sqrt(\n          Math.pow(kp2.x - kp1.x, 2) + Math.pow(kp2.y - kp1.y, 2)\n        );\n        setLineDistance(distance);\n      } else {\n        setLineDistance(0);\n      }\n    }\n  }, [image, selectedKeypoints, drawImage]);\n\n  return (\n    <div className=\"container\">\n      {image && (\n        <img\n          alt=\"Clicked_Image\"\n          width={600}\n          height={600}\n          src={image.image}\n        />\n      )}\n\n      <canvas\n        ref={canvasRef}\n        className=\"canvas\"\n        width={600}\n        height={600}\n        onClick={handleCanvasClick}\n      />\n\n      <div className=\"keypoints\">\n        <h4>Keypoints:</h4>\n        {keypoints.map((keypoint, index) => (\n          <div\n            key={index}\n            className={`keypoint ${selectedKeypoints.includes(keypoint) ? 'selected' : ''}`}\n            onClick={() => handleKeypointClick(keypoint)}\n          >\n            {`Keypoint ${index + 1}: (${keypoint.x}, ${keypoint.y})`}\n          </div>\n        ))}\n      </div>\n\n      {selectedKeypoints.length === 2 && (\n        <div className=\"distance\">\n          <h4>Distance:</h4>\n          {`Distance between keypoints: ${lineDistance.toFixed(2)} pixels`}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImagesAnnotationPage;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACvE,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMU,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACe,YAAY,EAAEC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}