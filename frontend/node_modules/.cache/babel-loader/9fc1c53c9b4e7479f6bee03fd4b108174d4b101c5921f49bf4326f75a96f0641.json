{"ast":null,"code":"var _jsxFileName = \"/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImageViewer.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageViewer() {\n  // const canvasRef = useRef(null);\n  // const [keypoints, setKeypoints] = useState([]);\n\n  // useEffect(() => {\n  //   const canvas = canvasRef.current;\n  //   const context = canvas.getContext('2d');\n\n  //   // Draw image on the canvas\n  //   const img = new Image();\n  //   img.src = image.url;\n  //   img.onload = () => {\n  //     context.drawImage(img, 0, 0, canvas.width, canvas.height);\n  //   };\n\n  //   // Draw keypoints on the canvas\n  //   keypoints.forEach((keypoint) => {\n  //     context.beginPath();\n  //     context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n  //     context.fillStyle = 'red';\n  //     context.fill();\n  //     context.closePath();\n  //   });\n  // }, [image.url, keypoints]);\n\n  // const handleCanvasClick = (event) => {\n  //   const canvas = canvasRef.current;\n  //   const rect = canvas.getBoundingClientRect();\n  //   const x = event.clientX - rect.left;\n  //   const y = event.clientY - rect.top;\n\n  //   // Add new keypoint to the list\n  //   setKeypoints([...keypoints, { x, y }]);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image View Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_c = ImageViewer;\nexport default ImageViewer;\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","ImageViewer","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/ImageViewer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nfunction ImageViewer() {\n  // const canvasRef = useRef(null);\n  // const [keypoints, setKeypoints] = useState([]);\n\n  // useEffect(() => {\n  //   const canvas = canvasRef.current;\n  //   const context = canvas.getContext('2d');\n\n  //   // Draw image on the canvas\n  //   const img = new Image();\n  //   img.src = image.url;\n  //   img.onload = () => {\n  //     context.drawImage(img, 0, 0, canvas.width, canvas.height);\n  //   };\n\n  //   // Draw keypoints on the canvas\n  //   keypoints.forEach((keypoint) => {\n  //     context.beginPath();\n  //     context.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);\n  //     context.fillStyle = 'red';\n  //     context.fill();\n  //     context.closePath();\n  //   });\n  // }, [image.url, keypoints]);\n\n  // const handleCanvasClick = (event) => {\n  //   const canvas = canvasRef.current;\n  //   const rect = canvas.getBoundingClientRect();\n  //   const x = event.clientX - rect.left;\n  //   const y = event.clientY - rect.top;\n\n  //   // Add new keypoint to the list\n  //   setKeypoints([...keypoints, { x, y }]);\n  // };\n\n  return (\n    <div>\n      <h1>Image View Page</h1>\n      {/* <canvas\n        ref={canvasRef}\n        width={800} // Set your desired width\n        height={600} // Set your desired height\n        onClick={handleCanvasClick}\n      /> */}\n    </div>\n  );\n}\n\nexport default ImageViewer;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,WAAWA,CAAA,EAAG;EACrB;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACED,OAAA;IAAAE,QAAA,eACEF,OAAA;MAAAE,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAOrB,CAAC;AAEV;AAACC,EAAA,GA9CQN,WAAW;AAgDpB,eAAeA,WAAW;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}