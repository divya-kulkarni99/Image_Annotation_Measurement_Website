{"ast":null,"code":"var _jsxFileName = \"/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/UploadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './UploadPage.css';\nimport sharp from 'sharp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadPage(props) {\n  _s();\n  const [image, setImage] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  function convertToBase64(e) {\n    console.log(e);\n    var reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n    reader.onload = () => {\n      console.log(reader.result); //base64encoded string  \n      setImage(reader.result);\n    };\n    reader.onerror = error => {\n      console.log(\"Error: \", error);\n      console.log(\"This is Base64 error: \", error);\n    };\n  }\n\n  // function uploadImage() {\n  //   fetch(\"http://localhost:5000/images/upload\", {\n  //       method: \"POST\",\n  //       crossDomain: true,\n  //       headers: {\n  //           \"Content-Type\": \"application/json\",\n  //           Accept: \"application/json\",\n  //           \"Access-Control-Allow-Origin\": \"*\",\n  //       },\n  //       body: JSON.stringify({\n  //           base64: image\n  //       })\n  //   }).then((res) => res.json()).then((data) =>{\n  //     console.log(data);\n  //     setIsModalOpen(true);\n\n  //   }\n\n  //     )\n  //   .catch((error) => {\n  //     console.error(error);\n\n  //   });\n  // }\n  // function closeModal() {\n  //   setIsModalOpen(false);\n  // }\n  function uploadImage() {\n    const imageBuffer = Buffer.from(image, \"base64\");\n    const metadata = sharp(imageBuffer).metadata();\n    metadata.then(metadataResult => {\n      const metadataPayload = {\n        date: new Date(),\n        fileformat: metadataResult.format\n      };\n      fetch(\"http://localhost:5000/images/upload\", {\n        method: \"POST\",\n        crossDomain: true,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n        body: JSON.stringify({\n          base64: image,\n          metadata: [metadataPayload]\n        })\n      }).then(res => res.json()).then(data => {\n        console.log(data);\n        setIsModalOpen(true);\n      }).catch(error => {\n        console.error(error);\n      });\n    });\n  }\n  function closeModal() {\n    setIsModalOpen(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload the Image you want to anonotate and measure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Steps to annotate you images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"1. Upload an image by choosing a file by clicking on upload button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      accept: \"image/*\",\n      type: \"file\",\n      id: \"file\",\n      onChange: convertToBase64\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file\",\n      className: \"label-file\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"material-icons\",\n        children: \"add_photo_alternate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 58\n      }, this), \"Choose an Image\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), image === \"\" || image == null ? \"\" : /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"UploadedImage\",\n      width: 300,\n      height: 300,\n      src: image,\n      className: \"imageUploded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-upload\",\n        disabled: image === \"\" || image === null,\n        onClick: () => {\n          uploadImage();\n        },\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Image Uploaded!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"To see images, click on the Images Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-close\",\n          onClick: closeModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s(UploadPage, \"r8OC0SlnqfsCkLojG6hLoHj2UfM=\");\n_c = UploadPage;\nexport default UploadPage;\n\n// import React, {useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const sharp = require(\"sharp\");\n\n// function convertToBase64(e) {\n//   console.log(e);\n//   var reader = new FileReader();\n//   reader.readAsDataURL(e.target.files[0]);\n//   reader.onload = () => {\n//       console.log(reader.result); //base64encoded string  \n//       setImage(reader.result);\n//   };\n//   reader.onerror = error => {\n//       console.log(\"Error: \", error);\n//       console.log(\"This is Base64 error: \", error);\n//   };\n// }\n\n// function uploadImage() {\n//   // Read the image file using sharp\n//   sharp(image)\n//     .metadata()\n//     .then((metadata) => {\n//       const { format, size } = metadata;\n\n//       const metadataObj = {\n//         files: [\n//           {\n//             filename: \"your_file_name_here\",\n//             fileformat: format,\n//             filesize: size,\n//           },\n//         ],\n//         // Add more metadata fields as needed\n//       };\n\n//       fetch(\"http://localhost:5000/images/upload\", {\n//         method: \"POST\",\n//         crossDomain: true,\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Accept: \"application/json\",\n//           \"Access-Control-Allow-Origin\": \"*\",\n//         },\n//         body: JSON.stringify({\n//           base64: image,\n//           metadata: metadataObj,\n//         }),\n//       })\n//         .then((res) => res.json())\n//         .then((data) => {\n//           console.log(data);\n//           setIsModalOpen(true);\n//         })\n//         .catch((error) => {\n//           console.error(error);\n//         });\n//     })\n//     .catch((error) => {\n//       console.error(\"Error reading image metadata:\", error);\n//     });\n// }\n// function closeModal() {\n// setIsModalOpen(false);\n// }\n\n// return (\n\n//       <div className='upload'>\n\n//           <h3>Upload the Image you want to anonotate and measure</h3>\n//           <h4>Steps to annotate you images</h4>\n//           <p>\n//             1. Upload an image by choosing a file by clicking on upload button\n//           </p>\n//           <p>\n//             2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\n//           </p>\n//           <p>\n//             3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\n//           </p>\n//           <input\n//               accept=\"image/*\"\n//               type=\"file\"\n//               id=\"file\"\n//               onChange={convertToBase64}\n//           />\n//           <label htmlFor=\"file\" className=\"label-file\"><i className='material-icons'>add_photo_alternate</i>Choose an Image</label>\n//           {image === \"\" || image == null ? \"\" : <img alt=\"UploadedImage\" width={300} height={300} src={image} className=\"imageUploded\" />}\n//         <div>\n//           <button className=\"button-upload\" disabled={image === \"\" || image === null} onClick={() => {uploadImage(); }}>Upload Image</button>\n\n//         </div>\n//         {isModalOpen && (\n//       <div className=\"modal\">\n//         <div className=\"modal-content\">\n//           <h2>Image Uploaded!</h2>\n//           <p>To see images, click on the Images Page</p>\n//           <button className=\"modal-close\" onClick={closeModal}>\n//             Close\n//           </button>\n//         </div>\n//       </div>\n//     )}\n\n//       </div>\n\n// );\n// }\n\n// export default UploadPage;\n// import React, { useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   function convertToBase64(e) {\n//     const file = e.target.files[0];\n//     const reader = new FileReader();\n\n//     reader.onload = () => {\n//       const base64Image = reader.result.split(',')[1]; // Extract the base64-encoded image data\n//       setImage({\n//         base64: base64Image,\n\n//       });\n//     }\n\n//     reader.onerror = error => {\n//       console.log(\"Error: \", error);\n//       console.log(\"This is Base64 error: \", error);\n//     };\n\n//     reader.readAsDataURL(file);\n//   }\n\n// import React, { useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage() {\n//   const [image, setImage] = useState(null);\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   const handleImageUpload = (e) => {\n//     const file = e.target.files[0];\n//     convertToBase64(file);\n//   };\n\n//   const convertToBase64 = (file) => {\n//     const reader = new FileReader();\n//     reader.readAsDataURL(file);\n//     reader.onload = () => {\n//       setImage(reader.result);\n//     };\n//   };\n\n//   const uploadImage = () => {\n//     fetch('http://localhost:5000/images/upload', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify({\n//         image: image\n//       })\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         console.log(data);\n//         setIsModalOpen(true);\n//       })\n//       .catch((error) => {\n//         console.error(error);\n//       });\n//   };\n\n//   const closeModal = () => {\n//     setIsModalOpen(false);\n//   };\n\n//   return (\n//     <div className='upload'>\n//       <h3>Upload the Image you want to annotate and measure</h3>\n//       <input\n//         type='file'\n//         accept='image/*'\n//         onChange={handleImageUpload}\n//       />\n//       {image && (\n//         <img src={image} alt='Uploaded' width={300} height={300} />\n//       )}\n//       <button disabled={!image} onClick={uploadImage}>Upload Image</button>\n\n//       {isModalOpen && (\n//         <div className='modal'>\n//           <div className='modal-content'>\n//             <h2>Image Uploaded!</h2>\n//             <p>To see images, click on the Images Page</p>\n//             <button onClick={closeModal}>Close</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","sharp","jsxDEV","_jsxDEV","UploadPage","props","_s","image","setImage","isModalOpen","setIsModalOpen","convertToBase64","e","console","log","reader","FileReader","readAsDataURL","target","files","onload","result","onerror","error","uploadImage","imageBuffer","Buffer","from","metadata","then","metadataResult","metadataPayload","date","Date","fileformat","format","fetch","method","crossDomain","headers","Accept","body","JSON","stringify","base64","res","json","data","catch","closeModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","type","id","onChange","htmlFor","alt","width","height","src","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/UploadPage.js"],"sourcesContent":["import React, {useState } from 'react';\nimport './UploadPage.css';\nimport sharp from 'sharp';\n\nfunction UploadPage(props) {\n  const [image,setImage] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  function convertToBase64(e) {\n    console.log(e);\n    var reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n    reader.onload = () => {\n        console.log(reader.result); //base64encoded string  \n        setImage(reader.result);\n    };\n    reader.onerror = error => {\n        console.log(\"Error: \", error);\n        console.log(\"This is Base64 error: \", error);\n    };\n}\n\n\n// function uploadImage() {\n//   fetch(\"http://localhost:5000/images/upload\", {\n//       method: \"POST\",\n//       crossDomain: true,\n//       headers: {\n//           \"Content-Type\": \"application/json\",\n//           Accept: \"application/json\",\n//           \"Access-Control-Allow-Origin\": \"*\",\n//       },\n//       body: JSON.stringify({\n//           base64: image\n//       })\n//   }).then((res) => res.json()).then((data) =>{\n//     console.log(data);\n//     setIsModalOpen(true);\n    \n//   }\n  \n    \n  \n//     )\n//   .catch((error) => {\n//     console.error(error);\n\n    \n//   });\n// }\n// function closeModal() {\n//   setIsModalOpen(false);\n// }\nfunction uploadImage() {\n  const imageBuffer = Buffer.from(image, \"base64\");\n  const metadata = sharp(imageBuffer).metadata();\n\n  metadata.then((metadataResult) => {\n    const metadataPayload = {\n      date: new Date(),\n      fileformat: metadataResult.format,\n    };\n\n    fetch(\"http://localhost:5000/images/upload\", {\n      method: \"POST\",\n      crossDomain: true,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: JSON.stringify({\n        base64: image,\n        metadata: [metadataPayload],\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setIsModalOpen(true);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n}\nfunction closeModal() {\n  setIsModalOpen(false);\n}\n\n\n  return (\n   \n        <div className='upload'>\n            \n            <h3>Upload the Image you want to anonotate and measure</h3>\n            <h4>Steps to annotate you images</h4>\n            <p>\n              1. Upload an image by choosing a file by clicking on upload button\n            </p>\n            <p>\n              2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\n            </p>\n            <p>\n              3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\n            </p>\n            <input\n                accept=\"image/*\"\n                type=\"file\"\n                id=\"file\"\n                onChange={convertToBase64}\n            />\n            <label htmlFor=\"file\" className=\"label-file\"><i className='material-icons'>add_photo_alternate</i>Choose an Image</label>\n            {image === \"\" || image == null ? \"\" : <img alt=\"UploadedImage\" width={300} height={300} src={image} className=\"imageUploded\" />}\n          <div>\n            <button className=\"button-upload\" disabled={image === \"\" || image === null} onClick={() => {uploadImage(); }}>Upload Image</button>\n          \n            \n          </div>\n          {isModalOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h2>Image Uploaded!</h2>\n            <p>To see images, click on the Images Page</p>\n            <button className=\"modal-close\" onClick={closeModal}>\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n            \n            \n        </div>\n    \n  );\n}\n\nexport default UploadPage;\n\n// import React, {useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const sharp = require(\"sharp\");\n\n// function convertToBase64(e) {\n//   console.log(e);\n//   var reader = new FileReader();\n//   reader.readAsDataURL(e.target.files[0]);\n//   reader.onload = () => {\n//       console.log(reader.result); //base64encoded string  \n//       setImage(reader.result);\n//   };\n//   reader.onerror = error => {\n//       console.log(\"Error: \", error);\n//       console.log(\"This is Base64 error: \", error);\n//   };\n// }\n\n\n// function uploadImage() {\n//   // Read the image file using sharp\n//   sharp(image)\n//     .metadata()\n//     .then((metadata) => {\n//       const { format, size } = metadata;\n\n//       const metadataObj = {\n//         files: [\n//           {\n//             filename: \"your_file_name_here\",\n//             fileformat: format,\n//             filesize: size,\n//           },\n//         ],\n//         // Add more metadata fields as needed\n//       };\n\n//       fetch(\"http://localhost:5000/images/upload\", {\n//         method: \"POST\",\n//         crossDomain: true,\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Accept: \"application/json\",\n//           \"Access-Control-Allow-Origin\": \"*\",\n//         },\n//         body: JSON.stringify({\n//           base64: image,\n//           metadata: metadataObj,\n//         }),\n//       })\n//         .then((res) => res.json())\n//         .then((data) => {\n//           console.log(data);\n//           setIsModalOpen(true);\n//         })\n//         .catch((error) => {\n//           console.error(error);\n//         });\n//     })\n//     .catch((error) => {\n//       console.error(\"Error reading image metadata:\", error);\n//     });\n// }\n// function closeModal() {\n// setIsModalOpen(false);\n// }\n\n\n// return (\n \n//       <div className='upload'>\n          \n//           <h3>Upload the Image you want to anonotate and measure</h3>\n//           <h4>Steps to annotate you images</h4>\n//           <p>\n//             1. Upload an image by choosing a file by clicking on upload button\n//           </p>\n//           <p>\n//             2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\n//           </p>\n//           <p>\n//             3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\n//           </p>\n//           <input\n//               accept=\"image/*\"\n//               type=\"file\"\n//               id=\"file\"\n//               onChange={convertToBase64}\n//           />\n//           <label htmlFor=\"file\" className=\"label-file\"><i className='material-icons'>add_photo_alternate</i>Choose an Image</label>\n//           {image === \"\" || image == null ? \"\" : <img alt=\"UploadedImage\" width={300} height={300} src={image} className=\"imageUploded\" />}\n//         <div>\n//           <button className=\"button-upload\" disabled={image === \"\" || image === null} onClick={() => {uploadImage(); }}>Upload Image</button>\n        \n          \n//         </div>\n//         {isModalOpen && (\n//       <div className=\"modal\">\n//         <div className=\"modal-content\">\n//           <h2>Image Uploaded!</h2>\n//           <p>To see images, click on the Images Page</p>\n//           <button className=\"modal-close\" onClick={closeModal}>\n//             Close\n//           </button>\n//         </div>\n//       </div>\n//     )}\n          \n          \n//       </div>\n  \n// );\n// }\n\n// export default UploadPage;\n// import React, { useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   function convertToBase64(e) {\n//     const file = e.target.files[0];\n//     const reader = new FileReader();\n  \n//     reader.onload = () => {\n//       const base64Image = reader.result.split(',')[1]; // Extract the base64-encoded image data\n//       setImage({\n//         base64: base64Image,\n       \n//       });\n//     }\n  \n//     reader.onerror = error => {\n//       console.log(\"Error: \", error);\n//       console.log(\"This is Base64 error: \", error);\n//     };\n  \n//     reader.readAsDataURL(file);\n//   }\n\n\n\n  // import React, { useState } from 'react';\n  // import './UploadPage.css';\n  \n  // function UploadPage() {\n  //   const [image, setImage] = useState(null);\n  //   const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  //   const handleImageUpload = (e) => {\n  //     const file = e.target.files[0];\n  //     convertToBase64(file);\n  //   };\n  \n  //   const convertToBase64 = (file) => {\n  //     const reader = new FileReader();\n  //     reader.readAsDataURL(file);\n  //     reader.onload = () => {\n  //       setImage(reader.result);\n  //     };\n  //   };\n  \n  //   const uploadImage = () => {\n  //     fetch('http://localhost:5000/images/upload', {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify({\n  //         image: image\n  //       })\n  //     })\n  //       .then((res) => res.json())\n  //       .then((data) => {\n  //         console.log(data);\n  //         setIsModalOpen(true);\n  //       })\n  //       .catch((error) => {\n  //         console.error(error);\n  //       });\n  //   };\n  \n  //   const closeModal = () => {\n  //     setIsModalOpen(false);\n  //   };\n  \n  //   return (\n  //     <div className='upload'>\n  //       <h3>Upload the Image you want to annotate and measure</h3>\n  //       <input\n  //         type='file'\n  //         accept='image/*'\n  //         onChange={handleImageUpload}\n  //       />\n  //       {image && (\n  //         <img src={image} alt='Uploaded' width={300} height={300} />\n  //       )}\n  //       <button disabled={!image} onClick={uploadImage}>Upload Image</button>\n  \n  //       {isModalOpen && (\n  //         <div className='modal'>\n  //           <div className='modal-content'>\n  //             <h2>Image Uploaded!</h2>\n  //             <p>To see images, click on the Images Page</p>\n  //             <button onClick={closeModal}>Close</button>\n  //           </div>\n  //         </div>\n  //       )}\n  //     </div>\n  //   );\n  // }\n  \n  // export default UploadPage;\n  "],"mappings":"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,OAAA;UAAQ+C,SAAS,EAAC,aAAa;UAACgB,OAAO,EAAEjB,UAAW;UAAAE,QAAA,EAAC;QAErD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGM,CAAC;AAGd;AAACjD,EAAA,CAnIQF,UAAU;AAAA+D,EAAA,GAAV/D,UAAU;AAqInB,eAAeA,UAAU;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAIE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}