{"ast":null,"code":"var _jsxFileName = \"/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/UploadPage.js\",\n  _s = $RefreshSig$();\n// import React, {useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   function convertToBase64(e) {\n//     console.log(e);\n//     var reader = new FileReader();\n//     reader.readAsDataURL(e.target.files[0]);\n//     reader.onload = () => {\n//         console.log(reader.result); //base64encoded string  \n//         setImage(reader.result);\n//     };\n//     reader.onerror = error => {\n//         console.log(\"Error: \", error);\n//         console.log(\"This is Base64 error: \", error);\n//     };\n// }\n\n// function uploadImage() {\n//   fetch(\"http://localhost:5000/images/upload\", {\n//       method: \"POST\",\n//       crossDomain: true,\n//       headers: {\n//           \"Content-Type\": \"application/json\",\n//           Accept: \"application/json\",\n//           \"Access-Control-Allow-Origin\": \"*\",\n//       },\n//       body: JSON.stringify({\n//           base64: image\n//       })\n//   }).then((res) => res.json()).then((data) =>{\n//     console.log(data);\n//     setIsModalOpen(true);\n\n//   }\n\n//     )\n//   .catch((error) => {\n//     console.error(error);\n\n//   });\n// }\n// function closeModal() {\n//   setIsModalOpen(false);\n// }\n\n//   return (\n\n//         <div className='upload'>\n\n//             <h3>Upload the Image you want to anonotate and measure</h3>\n//             <h4>Steps to annotate you images</h4>\n//             <p>\n//               1. Upload an image by choosing a file by clicking on upload button\n//             </p>\n//             <p>\n//               2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\n//             </p>\n//             <p>\n//               3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\n//             </p>\n//             <input\n//                 accept=\"image/*\"\n//                 type=\"file\"\n//                 id=\"file\"\n//                 onChange={convertToBase64}\n//             />\n//             <label htmlFor=\"file\" className=\"label-file\"><i className='material-icons'>add_photo_alternate</i>Choose an Image</label>\n//             {image === \"\" || image == null ? \"\" : <img alt=\"UploadedImage\" width={300} height={300} src={image} className=\"imageUploded\" />}\n//           <div>\n//             <button className=\"button-upload\" disabled={image === \"\" || image === null} onClick={() => {uploadImage(); }}>Upload Image</button>\n\n//           </div>\n//           {isModalOpen && (\n//         <div className=\"modal\">\n//           <div className=\"modal-content\">\n//             <h2>Image Uploaded!</h2>\n//             <p>To see images, click on the Images Page</p>\n//             <button className=\"modal-close\" onClick={closeModal}>\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//         </div>\n\n//   );\n// }\n\n// export default UploadPage;\nimport React, { useState } from 'react';\nimport './UploadPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadPage(props) {\n  _s();\n  const [image, setImage] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // function convertToBase64(e) {\n  //   const file = e.target.files[0];\n  //   const reader = new FileReader();\n\n  //   reader.onload = () => {\n  //     const base64Image = reader.result.split(',')[1]; // Extract the base64-encoded image data\n  //     setImage({\n  //       base64: base64Image,\n\n  //     });\n  //   }\n\n  //   reader.onerror = error => {\n  //     console.log(\"Error: \", error);\n  //     console.log(\"This is Base64 error: \", error);\n  //   };\n\n  //   reader.readAsDataURL(file);\n  // }\n\n  function convertToBase64(e) {\n    console.log(e);\n    var reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n    reader.onload = () => {\n      console.log(reader.result); //base64encoded string  \n      setImage(reader.result);\n    };\n    reader.onerror = error => {\n      console.log(\"Error: \", error);\n      console.log(\"This is Base64 error: \", error);\n    };\n  }\n  function uploadImage() {\n    if (!image.base64) {\n      console.log(\"No image data available\");\n      return;\n    }\n    const {\n      base64,\n      metadata\n    } = image;\n    fetch(\"http://localhost:5000/images/upload\", {\n      method: \"POST\",\n      crossDomain: true,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      body: JSON.stringify({\n        base64,\n        metadata\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      setIsModalOpen(true);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  function closeModal() {\n    setIsModalOpen(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload the Image you want to annotate and measure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Steps to annotate your images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"1. Upload an image by choosing a file by clicking on the upload button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      accept: \"image/*\",\n      type: \"file\",\n      id: \"file\",\n      onChange: convertToBase64\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file\",\n      className: \"label-file\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"material-icons\",\n        children: \"add_photo_alternate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), \"Choose an Image\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), image === \"\" || image == null ? \"\" : /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"UploadedImage\",\n      width: 300,\n      height: 300,\n      src: image.image,\n      className: \"imageUploded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-upload\",\n        disabled: image === \"\" || image === null,\n        onClick: () => {\n          uploadImage();\n        },\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Image Uploaded!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"To see images, click on the Images Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-close\",\n          onClick: closeModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadPage, \"yKVYaAAs8zgleRI6ZMQq+iI+SWw=\");\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadPage","props","_s","image","setImage","isModalOpen","setIsModalOpen","convertToBase64","e","console","log","reader","FileReader","readAsDataURL","target","files","onload","result","onerror","error","uploadImage","base64","metadata","fetch","method","crossDomain","headers","Accept","body","JSON","stringify","then","res","json","data","catch","closeModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","type","id","onChange","htmlFor","alt","width","height","src","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/divyakulkarni/Desktop/IAMW/image-annotation-measurement/src/pages/UploadPage.js"],"sourcesContent":["// import React, {useState } from 'react';\n// import './UploadPage.css';\n\n// function UploadPage(props) {\n//   const [image,setImage] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   function convertToBase64(e) {\n//     console.log(e);\n//     var reader = new FileReader();\n//     reader.readAsDataURL(e.target.files[0]);\n//     reader.onload = () => {\n//         console.log(reader.result); //base64encoded string  \n//         setImage(reader.result);\n//     };\n//     reader.onerror = error => {\n//         console.log(\"Error: \", error);\n//         console.log(\"This is Base64 error: \", error);\n//     };\n// }\n\n\n// function uploadImage() {\n//   fetch(\"http://localhost:5000/images/upload\", {\n//       method: \"POST\",\n//       crossDomain: true,\n//       headers: {\n//           \"Content-Type\": \"application/json\",\n//           Accept: \"application/json\",\n//           \"Access-Control-Allow-Origin\": \"*\",\n//       },\n//       body: JSON.stringify({\n//           base64: image\n//       })\n//   }).then((res) => res.json()).then((data) =>{\n//     console.log(data);\n//     setIsModalOpen(true);\n    \n//   }\n  \n    \n  \n//     )\n//   .catch((error) => {\n//     console.error(error);\n\n    \n//   });\n// }\n// function closeModal() {\n//   setIsModalOpen(false);\n// }\n\n\n//   return (\n   \n//         <div className='upload'>\n            \n//             <h3>Upload the Image you want to anonotate and measure</h3>\n//             <h4>Steps to annotate you images</h4>\n//             <p>\n//               1. Upload an image by choosing a file by clicking on upload button\n//             </p>\n//             <p>\n//               2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate\n//             </p>\n//             <p>\n//               3. Place the keys and save them, click on any two key points and find the distance between them in Pixels\n//             </p>\n//             <input\n//                 accept=\"image/*\"\n//                 type=\"file\"\n//                 id=\"file\"\n//                 onChange={convertToBase64}\n//             />\n//             <label htmlFor=\"file\" className=\"label-file\"><i className='material-icons'>add_photo_alternate</i>Choose an Image</label>\n//             {image === \"\" || image == null ? \"\" : <img alt=\"UploadedImage\" width={300} height={300} src={image} className=\"imageUploded\" />}\n//           <div>\n//             <button className=\"button-upload\" disabled={image === \"\" || image === null} onClick={() => {uploadImage(); }}>Upload Image</button>\n          \n            \n//           </div>\n//           {isModalOpen && (\n//         <div className=\"modal\">\n//           <div className=\"modal-content\">\n//             <h2>Image Uploaded!</h2>\n//             <p>To see images, click on the Images Page</p>\n//             <button className=\"modal-close\" onClick={closeModal}>\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n            \n            \n//         </div>\n    \n//   );\n// }\n\n// export default UploadPage;\nimport React, { useState } from 'react';\nimport './UploadPage.css';\n\nfunction UploadPage(props) {\n  const [image, setImage] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // function convertToBase64(e) {\n  //   const file = e.target.files[0];\n  //   const reader = new FileReader();\n  \n  //   reader.onload = () => {\n  //     const base64Image = reader.result.split(',')[1]; // Extract the base64-encoded image data\n  //     setImage({\n  //       base64: base64Image,\n       \n  //     });\n  //   }\n  \n  //   reader.onerror = error => {\n  //     console.log(\"Error: \", error);\n  //     console.log(\"This is Base64 error: \", error);\n  //   };\n  \n  //   reader.readAsDataURL(file);\n  // }\n\n\n    function convertToBase64(e) {\n    console.log(e);\n    var reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n    reader.onload = () => {\n        console.log(reader.result); //base64encoded string  \n        setImage(reader.result);\n    };\n    reader.onerror = error => {\n        console.log(\"Error: \", error);\n        console.log(\"This is Base64 error: \", error);\n    };\n}\n  function uploadImage() {\n    if (!image.base64) {\n      console.log(\"No image data available\");\n      return;\n    }\n  \n    const { base64, metadata } = image;\n  \n    fetch(\"http://localhost:5000/images/upload\", {\n      method: \"POST\",\n      crossDomain: true,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: JSON.stringify({\n        base64,\n        metadata\n      })\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setIsModalOpen(true);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n  \n\n  function closeModal() {\n    setIsModalOpen(false);\n  }\n\n  return (\n    <div className='upload'>\n      <h3>Upload the Image you want to annotate and measure</h3>\n      <h4>Steps to annotate your images</h4>\n      <p>1. Upload an image by choosing a file by clicking on the upload button</p>\n      <p>2. Go to the Gallery Page to see the uploaded images and select one image which you want to annotate</p>\n      <p>3. Place the keys and save them, click on any two key points and find the distance between them in Pixels</p>\n      <input\n        accept=\"image/*\"\n        type=\"file\"\n        id=\"file\"\n        onChange={convertToBase64}\n      />\n      <label htmlFor=\"file\" className=\"label-file\">\n        <i className='material-icons'>add_photo_alternate</i>Choose an Image\n      </label>\n      {image === \"\" || image == null ? (\n        \"\"\n      ) : (\n        <img alt=\"UploadedImage\" width={300} height={300} src={image.image} className=\"imageUploded\" />\n      )}\n      <div>\n        <button\n          className=\"button-upload\"\n          disabled={image === \"\" || image === null}\n          onClick={() => {\n            uploadImage();\n          }}\n        >\n          Upload Image\n        </button>\n      </div>\n      {isModalOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h2>Image Uploaded!</h2>\n            <p>To see images, click on the Images Page</p>\n            <button className=\"modal-close\" onClick={closeModal}>\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default UploadPage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAGE,SAASU,eAAeA,CAACC,CAAC,EAAE;IAC5BC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IACd,IAAIG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC7BD,MAAM,CAACE,aAAa,CAACL,CAAC,CAACM,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvCJ,MAAM,CAACK,MAAM,GAAG,MAAM;MAClBP,OAAO,CAACC,GAAG,CAACC,MAAM,CAACM,MAAM,CAAC,CAAC,CAAC;MAC5Bb,QAAQ,CAACO,MAAM,CAACM,MAAM,CAAC;IAC3B,CAAC;IACDN,MAAM,CAACO,OAAO,GAAGC,KAAK,IAAI;MACtBV,OAAO,CAACC,GAAG,CAAC,SAAS,EAAES,KAAK,CAAC;MAC7BV,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAES,KAAK,CAAC;IAChD,CAAC;EACL;EACE,SAASC,WAAWA,CAAA,EAAG;IACrB,IAAI,CAACjB,KAAK,CAACkB,MAAM,EAAE;MACjBZ,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC;IACF;IAEA,MAAM;MAAEW,MAAM;MAAEC;IAAS,CAAC,GAAGnB,KAAK;IAElCoB,KAAK,CAAC,qCAAqC,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1B,6BAA6B,EAAE;MACjC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBT,MAAM;QACNC;MACF,CAAC;IACH,CAAC,CAAC,CACCS,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdzB,OAAO,CAACC,GAAG,CAACwB,IAAI,CAAC;MACjB5B,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,CACD6B,KAAK,CAAEhB,KAAK,IAAK;MAChBV,OAAO,CAACU,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN;EAGA,SAASiB,UAAUA,CAAA,EAAG;IACpB9B,cAAc,CAAC,KAAK,CAAC;EACvB;EAEA,oBACEP,OAAA;IAAKsC,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACrBvC,OAAA;MAAAuC,QAAA,EAAI;IAAiD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1D3C,OAAA;MAAAuC,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtC3C,OAAA;MAAAuC,QAAA,EAAG;IAAsE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7E3C,OAAA;MAAAuC,QAAA,EAAG;IAAoG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC3G3C,OAAA;MAAAuC,QAAA,EAAG;IAAyG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAChH3C,OAAA;MACE4C,MAAM,EAAC,SAAS;MAChBC,IAAI,EAAC,MAAM;MACXC,EAAE,EAAC,MAAM;MACTC,QAAQ,EAAEvC;IAAgB;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACF3C,OAAA;MAAOgD,OAAO,EAAC,MAAM;MAACV,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC1CvC,OAAA;QAAGsC,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,mBACvD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,EACPvC,KAAK,KAAK,EAAE,IAAIA,KAAK,IAAI,IAAI,GAC5B,EAAE,gBAEFJ,OAAA;MAAKiD,GAAG,EAAC,eAAe;MAACC,KAAK,EAAE,GAAI;MAACC,MAAM,EAAE,GAAI;MAACC,GAAG,EAAEhD,KAAK,CAACA,KAAM;MAACkC,SAAS,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC/F,eACD3C,OAAA;MAAAuC,QAAA,eACEvC,OAAA;QACEsC,SAAS,EAAC,eAAe;QACzBe,QAAQ,EAAEjD,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,IAAK;QACzCkD,OAAO,EAAEA,CAAA,KAAM;UACbjC,WAAW,CAAC,CAAC;QACf,CAAE;QAAAkB,QAAA,EACH;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACLrC,WAAW,iBACVN,OAAA;MAAKsC,SAAS,EAAC,OAAO;MAAAC,QAAA,eACpBvC,OAAA;QAAKsC,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BvC,OAAA;UAAAuC,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxB3C,OAAA;UAAAuC,QAAA,EAAG;QAAuC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC9C3C,OAAA;UAAQsC,SAAS,EAAC,aAAa;UAACgB,OAAO,EAAEjB,UAAW;UAAAE,QAAA,EAAC;QAErD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACxC,EAAA,CAvHQF,UAAU;AAAAsD,EAAA,GAAVtD,UAAU;AAyHnB,eAAeA,UAAU;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}